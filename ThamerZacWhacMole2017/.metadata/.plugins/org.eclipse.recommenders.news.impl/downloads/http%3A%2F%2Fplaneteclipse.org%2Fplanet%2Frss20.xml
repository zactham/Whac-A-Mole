<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>itemis: Improving Eclipse CDT Indexer Performance</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/improving-eclipse-cdt-indexer-performance</guid>
	<link>https://blogs.itemis.com/en/improving-eclipse-cdt-indexer-performance</link>
	<description>&lt;p&gt;Many of our customers have chosen &lt;a href=&quot;https://eclipse.org/cdt/&quot; style=&quot;font-size: 16px;&quot;&gt;&lt;span&gt;Eclipse CDT&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; as their tooling for developing C/C++ projects and they frequently complain about the poor runtime of the CDT indexer. I would claim that we (Java developers) are quite spoiled about the excellent performance of the Java tooling in Eclipse.&lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Indexing a large Java workspace at startup may take several seconds, for really large projects maybe a few minutes, but afterwards it rarely blocks the sophisticated Java tooling. Be it large code imports or refactorings, Eclipse Java tooling handles that very well. But when developing a large C project, indexing may take several minutes, maybe even half an hour or more, depending on the available memory and CPU of course. This was the trigger for us to put some effort into analyzing the hotspots of the CDT indexer with the goal to improve performance.&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt; &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To make a long story short, an additional cache of internal string handling may speed up indexing time of certain projects by nearly 40%!&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Factors that Influence Indexer Performance&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First of all, let’s investigate the different factors that influence the indexer performance:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;strong&gt;Java heap size&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; that is available to the indexer for a cache:&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If the internally used memory for building and managing the index is too low, parts of the index is stored on the hard drive and we all know that writing data to and reading it from a hard drive is much more expensive than accessing it from main memory.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The CDT indexer has a preference option to allow it to consume up to 50% of the available heap size for an internal cache.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;strong&gt;Structure&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; of the C/C++ source files:&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If the sources are organized in a flat hierarchy, i.e. with few includes, and if it does not contain thousands of macro definitions, the indexer is much faster than sources with a high degree of includes and with plenty of macro definitions.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;strong&gt;Hardware resources&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The faster the CPU / hard drive / memory, the faster the indexer – obviously ;-)&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We don’t have much influence on the latter two factors, but at least we can configure Eclipse and the CDT indexer to have enough memory available (e.g. 1 GB). But still, performance is far from acceptable (some customers even reported times of 45 minutes and longer).&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So we took one of our customer’s projects, an &lt;/span&gt;&lt;a href=&quot;https://www.autosar.org/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;AUTOSAR&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; project, which had an indexing time of slightly more than 10 minutes on my machine, and used the &lt;/span&gt;&lt;a href=&quot;https://www.yourkit.com/java/profiler/features/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;YourKit Java Profiler&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to search for some hotspots:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;observation: during 1 minute, the indexer was creating more than 4 billion (!) objects of type &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/cdt/blob/cdt_9_2/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/ShortString.java&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;ShortString&lt;/code&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/cdt/blob/cdt_9_2/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/LongString.java&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;observation: most calculation time is spent for comparing large char arrays (e.g. length &amp;gt; 70,000) which are represented by long strings.&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To tackle these two issues, we first need to understand the actual problem:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Why are so many objects created (and garbage collected just as fast)?&lt;/span&gt;&lt;/i&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;What are these long strings?&lt;/span&gt;&lt;/i&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Why is it necessary to compare them?&lt;/span&gt;&lt;/i&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;How can we improve string handling and comparison?&lt;/span&gt;&lt;/i&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Code Structure Matters!&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When looking into these long strings that are frequently compared, it turns out that they consist of plenty of macro definitions concatenated in alphabetical order. It seems that they are calculated for particular locations in the source files for fast lookup. (To be honest, I did not (yet) fully understand how the indexer is working in detail, e.g. why it needs to store so many long but very similar strings – so please correct me if the conclusions to my observations are not correct.) We found the reason for these incredible long list of macro definitions inside the code structure which is sketched below:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;improve-Eclipse-CDT-Indexer-Performance-macro-definitions-inside-code-structure.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Embedded/macro-definitions-inside-code-structure.png?t=1496234112808&amp;amp;width=724&amp;amp;name=macro-definitions-inside-code-structure.png&quot; style=&quot;width: 724px;&quot; title=&quot;improve-Eclipse-CDT-Indexer-Performance-macro-definitions-inside-code-structure.png&quot; width=&quot;724&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;There is one large header file which contains more than 1,000 macro definitions (&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;MemMap.h&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;) and there are &lt;/span&gt;&lt;strong style=&quot;background-color: transparent;&quot;&gt;many &lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;other header files that include this file – even multiple times. New macro definitions and includes to &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;MemMap.h&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; do alternate, resulting in different sets of defined macros at each location. These macro definitions are stored by the indexer inside a data structure that is basically a super large char array. For adding and searching entries (e.g. the set of defined macros at a particular location), a binary tree data structure is used on top of that super large char array. Whenever a candidate string should be added or searched inside this binary tree, a visitor is used to compare existing entries with that candidate. The comparison must decide whether the candidate entry is smaller or larger than existing entries, which requires the strings to be compared character by character. For each entry to be compared, a new &lt;code&gt;ShortString&lt;/code&gt; or &lt;code&gt;LongString&lt;/code&gt; object is created which is a wrapper of the actual string with a &lt;code&gt;java.lang.String&lt;/code&gt;-like API for comparison.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First Attempt: Reducing Object Creation&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Our first guess was that the immense number of &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;- and &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; objects may slow down the overall performance, so we reduced that as far as possible:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Whenever a new string is stored inside the database, most of the time its location in the data structure (an index of the super large char array) is of interest – so we directly returned that index instead of creating (and immediately disposing) a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Short&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;-/&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; object.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Whenever some particular string is requested via such an index (e.g. the represented char array or a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;java.lang.String&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; instance), we directly retrieved that data instead of creating (and immediately disposing) a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;-/&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; object.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We only left the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;-/&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; objects when they are needed for comparisons.&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Although there are much less objects created, the indexer run time was not affected at all. It seems as if the Java compiler and the VM do quite some optimizations so that the overhead of creating wrapper objects does not really affect performance.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Second Attempt: Optimizing Comparison of Char Arrays&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Whenever two &lt;/span&gt;&lt;strong&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; instances are compared (i.e. determining their lexicographical order), &lt;/span&gt;&lt;strong&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;String.&lt;/code&gt;&lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/cdt/blob/cdt_9_2/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/db/ShortString.java#L146&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;compareChars&lt;/code&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(..)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is called. This looks odd. For understanding how and why this could be optimized, we must first understand the difference between a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;ShortString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;The database (the super large char array) is divided into chunks of 4096 chars. Whenever a string should be stored inside the database, one or more chunks must be allocated. If the string to be stored is larger than the available space inside one chunk, it must be split over multiple chunks.&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;ShortString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is shorter than the size of a chunk, so it fits into a single chunk.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is larger than the size of a single chunk, so it must be split and distributed over multiple chunks.&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A pointer to the beginning of the stored string is enough to represent the location and to retrieve it again when needed (the last entry in a chunk is a pointer to the next chunk).&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The costly comparison in our AUTOSAR project compares strings with length &amp;gt; 70,000, so it compares strings that are stored in ⌈70,000 / 4,096⌉ = 18 chunks. The current implementation loads the entire char array of full length for both strings to be compared, and compares them character by character, even if they already differ in a character contained in one of the first chunks. Our idea is a new compare logic for long strings, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString.compare(..)&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which loads and compares characters chunk by chunk to decide their lexicographical order. This implementation is listed in bug &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=515856&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;515856&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;With this optimization, indexer performance is in fact increased for our AUTOSAR project: instead of 680 seconds, the indexer finished in 640 seconds. This is an improvement of roughly 6% with no additional memory consumption.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Third Attempt: Caching Char Arrays&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The previous two attempts already explained that &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;-/&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; instances are always newly created for each access of strings stored inside the super large char array. Moreover, each access on the actual string (represented by a char array stored in one or more chunks), (re-)retrieves the desired char array from the chunks, e.g. for comparing it against another string. The indexer has already a cache built-in which holds recently accessed chunks in memory until the indexer cache size limit is hit. If a requested chunk is not inside the cache, it must be loaded from the super large char array. However, the actual char array for comparison is still reconstructed inside the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;-/&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; classes on each access.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Instead of caching chunks, we tried to cache the actual &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;-/&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; objects. Moreover, instead of having a fixed cache size, we use Java &lt;/span&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/ref/package-summary.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;references&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to let the garbage collector free some memory when needed. So whenever a new &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;-/&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is retrieved from the database and constructed from its chunks, it is stored by its long pointer in a map of references. Another access of the same string first checks whether the string is still contained in that map. If so, we can directly return it; if not, we need to re-construct the string from the chunks and re-add it into the map. It was a bit tricky to let the garbage collector free the memory for both, the string value and the key (the long pointer), but with a negligible overhead, it is possible. This implementation is listed in bug &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=514708&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;514708&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt; &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The resulting indexer performance in our AUTOSAR project looks promising: instead of 680 seconds, the indexer finished in 430 seconds. This is an &lt;/span&gt;&lt;strong&gt;improvement&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; of roughly &lt;/span&gt;&lt;strong&gt;37%&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;!&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Improved performance is typically a tradeoff between runtime and memory consumption. The above-mentioned patch uses &lt;/span&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/WeakReference.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;weak references&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; which are garbage collected as soon as heap size becomes sparse. Consequently, the newly introduced cache takes additional memory if available and the garbage collector takes care of cleaning it up when needed.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Benchmarking&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To quantify the performance improvements, we ran some benchmark tests for the latter two attempts. We tried several variants on the string cache to reduce memory consumption with the cost of slightly more code complexity. As test projects, we used the already mentioned AUTOSAR project as well as the &lt;/span&gt;&lt;a href=&quot;https://github.com/php/php-src&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;php&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; open source project, which has a totally different source code structure. Each project was indexed between 11 and 20 times with an indexer cache between 32 and 1024 MB (which did not noticeably affect performance). The results are shown in the table below. We also tried several other open source projects but failed to produce reasonable benchmark results: either the indexing time differed by just 1-2 seconds for a total indexing time between 15 and 45 seconds (samba, vlc, ffmpeg), or the indexer aborted because of too many errors (linux kernel, gcc). All results are listed &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/attachment.cgi?id=268355&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Project &lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan=&quot;3&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;AUTOSAR [20 runs]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Average runtime / Min / Max&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan=&quot;3&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;PHP [11 runs]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Average runtime / Min / Max&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;&lt;i&gt;Original runtime in seconds&lt;/i&gt;&lt;/strong&gt;&lt;strong&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/strong&gt;&lt;strong&gt;&lt;i&gt;(speedup in percent)&lt;/i&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;576&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;(0%)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;545&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;(0%)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;667&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;(0%)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;54&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(0%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;51&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(0%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;59&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(0%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;LongString.compare (Second Attempt)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;509&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(11.6%)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;485&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(18.1%)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;571&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(6.2%)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;55&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-1.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;50&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-11.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;60&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(5.7%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Weak (1) String Cache (Third Attempt)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;[ see explanation for note (1) below ]&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;370&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(35.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;342&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(38%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;419&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(31.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;56&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(3%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;51&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-20.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;64&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(11.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Soft (1) String Cache (Third Attempt)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-40&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;366&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(36.5%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-20&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;337&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(38.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-20&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;410&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(31.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;54&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(0.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;49&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-9.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;61&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(10.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;LongString.compare &amp;amp; Weak String Cache&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;441&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(23.5%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;422&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(29.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;503&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(19.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;56&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-3.7%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;53&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-11.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;60&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(5.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;LongString.compare &amp;amp; Soft String Cache&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;389&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(32.4%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;347&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(37.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;432&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(29.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;54&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(0.3%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;49&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-9.4%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;59&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(16.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Weak String Cache with disposing keys (2)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;371&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(35.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;342&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(37.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;421&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(31.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;55&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-2.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;51&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-11.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;59&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(11.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Soft String Cache with disposing keys&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-90&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;365&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px;&quot;&gt;(36.7%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-90&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;336&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px;&quot;&gt;(39.3%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-90&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;406&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong style=&quot;font-size: 14px;&quot;&gt;(34.7%)&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;56&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-3.5%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;51&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-9.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;61&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; font-size: 14px;&quot;&gt;(13.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Weak String Cache with hard cache (3)&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(100 strings)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;380&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(34.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;338&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(38%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;449&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(26%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;56&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-2.5%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;52&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-11.3%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;59&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(10.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Soft String Cache with hard cache&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(100 strings)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;374&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(35.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;337&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(38.7%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;442&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(28.5%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;56&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-3.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;51&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-13.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;60&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(13.6%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Weak String Cache with hard cache&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(1000 strings)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;370&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(35.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;340&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(38.3%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;420&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(33.7%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;55&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-0.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;49&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-13.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;63&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(11.9%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Soft String Cache with hard cache&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(1000 strings)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-20&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;369&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(36%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-40&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;335&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(39.1%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td class=&quot;green-40&quot; style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;413&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;(32.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;55&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(-1.8%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;51&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; font-size: 14px;&quot;&gt;(-9.4%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;text-align: center;&quot;&gt; &lt;p&gt;&lt;span style=&quot;font-weight: 400; font-size: 14px;&quot;&gt;61&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px; background-color: transparent;&quot;&gt;(10.2%)&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The first row is the original indexer run time. The subsequent rows show the result of different adjustments of the second and third attempt with several combinations and adjustments of the string cache. Unfortunately, the benchmark results of the php project vary a lot so that there is no clear improvement for any of the listed attempts. There seems to be some other factor that makes the indexer runtime vary. At least the different attempts do not observably slow down the indexer runtime.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As you can see in the highlighted cells for the AUTOSAR project, &lt;/span&gt;&lt;strong&gt;the string cache may speed up indexing time by up to 39%&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;! The &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;LongString&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;-specific compare implementation, on the other hand, only results in a speedup of 6-18%. Quite interesting is that a combination of the second and third attempt performs worse than the third attempt alone, but I don’t have any reasonable explanation for this.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Some further remarks to the variants we used for benchmarking:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(1) &lt;/span&gt;&lt;a href=&quot;https://community.oracle.com/blogs/enicholas/2006/05/04/understanding-weak-references&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Ethan Nicholas&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; says that “softly reachable objects are generally retained as long as memory is in plentiful supply. This makes them an excellent foundation for a cache”. The results confirm this citation.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(2) With a &lt;/span&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/ReferenceQueue.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;ReferenceQueue&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, the disposal of strings also disposes their keys in the map, so the garbage collector is capable of entirely wiping the string cache if necessary. Fortunately, this overhead does not have significant impact on performance – it even performs better than without key disposal.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(3) If memory gets sparse, weak and soft references are disposed by the garbage collector. But what if the most recently used strings would remain in memory anyhow? We used a &lt;/span&gt;&lt;a href=&quot;http://java2go.blogspot.de/2010/04/how-to-write-simple-yet-bullet-proof.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;hard cache&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to test this setting. Unfortunately, this does not yield any better performance. So we can omit this overhead.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Some words about additional memory consumption by the cache keys:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The life cycle of the string cache is bound to the life cycle of the indexer for a particular project. So the entire cache is discarded as soon as the indexer is discarded for a project. During the indexing task, however, the cache will be filled with keys (long pointers) to the cached strings which are wrapped in weak or soft references. So whenever the heap size becomes sparse, the garbage collector may dispose the cached strings (which happened between 2 and 90 times in the benchmarks above). When the indexer was done with the AUTOSAR project, the map had around 60.000 keys and only 2.000 cached strings, the rest was garbage collected. Without disposing the keys, memory consumption for these keys is 60.000 * 8 Byte (long value) = 480 KB, which is less than 1/500 of the default indexer cache size. IMHO, this temporary extra memory is more than tolerable for the achieved performance boost. Fortunately, the extra logic for disposing keys via a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;ReferenceQueue&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; does not affect the performance at all, so it does not hurt to clean that up, too :-)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;By the way, the modifications with the best results are provided in bug &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=514708&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;514708&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Join the Discussion!&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For code with less includes and less macro definitions, the exact same problems may not arise, but maybe the string lookup inside the binary tree is still the bottleneck. Please leave some comments whether you have similar or maybe other observations. Do you have further ideas or experiences how to improve performance?&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fimproving-eclipse-cdt-indexer-performance&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 31 May 2017 13:20:00 +0000</pubDate>
	<author>patrick.koenemann@itemis.com (Patrick Könemann)</author>
</item>
<item>
	<title>InfoQ Eclipse feed: Red Hat to Acquire Codenvy to Extend DevOps Tools Capability</title>
	<guid isPermaLink="true">http://www.infoq.com/news/2017/05/red-hat-acquires-codenvy?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</guid>
	<link>http://www.infoq.com/news/2017/05/red-hat-acquires-codenvy?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</link>
	<description>&lt;img src=&quot;http://www.infoq.com/styles/i/logo_bigger.jpg&quot; /&gt;&lt;p&gt;Red Hat has announced the acquisition of Codenvy, an Agile and cloud-native tools provider. Financial terms of the deal are not being publicly disclosed.&lt;/p&gt; &lt;i&gt;By Helen Beal&lt;/i&gt;</description>
	<pubDate>Wed, 31 May 2017 10:00:00 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: New Eclipse IoT Charter and Steering Committee</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4150</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/t6971F-tZEQ/</link>
	<description>&lt;p&gt;It is hard to believe the Eclipse IoT Working Group was launch over 5 years ago on &lt;a href=&quot;https://www.eclipse.org/org/press-release/20111101_m2msolutions.php&quot;&gt;November 1, 2011&lt;/a&gt;, at the time we called it Eclipse M2M.  A lot has changed over these 5 years, including the name, and the IoT industry has matured to be one of the dominant technology trends in the technology industry. The good news is the Eclipse IoT Working Group has been a huge success. We have a thriving open source community that includes 30 different projects, more than 200 developers and 30 member companies. Eclipse IoT is well known and positioned in the industry and continues to see momentum and growth.&lt;/p&gt;
&lt;p&gt;Given this community growth, we felt it was time to take a fresh look at the Eclipse IoT Working Group charter and the Steering Committee. After a number of drafts and revisions, we have updated and published the new &lt;a href=&quot;https://www.eclipse.org/org/workinggroups/iotwg_charter.php&quot;&gt;working group charter&lt;/a&gt;.  Most of the changes were done to reflect the current focus on IoT runtimes and frameworks and adding more clarity to the roles and responsibilities of the Steering Committee.&lt;/p&gt;
&lt;p&gt;Now that the new charter as been approved, I am thrilled to have Red Hat, Bosch and Eurotech volunteer to participate in the Eclipse IoT Steering Committee. All three companies are active leaders in the Eclipse IoT community and the general IoT industry. They each bring a unique perspective on IoT and open source to our community:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bosch is a world leading industrial company that is considered a leader in providing industrial IoT solutions. Their commitment and involvement in the Eclipse IoT community is evident by their involvement in projects like Eclipse Leshan, Eclipse Hono, Eclipse Vorto, Eclipse Hawkbit, and Eclipse Ditto.&lt;/li&gt;
&lt;li&gt;Eurotech is well known industrial gateway vendor that was one of the founding members of Eclipse M2M. They have experience incredible success with Eclipse Kura and are on the path to success with Eclipse Kapua.&lt;/li&gt;
&lt;li&gt;Red Hat has deep roots in open source and enterprise IT. In the last 2 years they have become deeply involved in projects like Kapua, Hono and others. They have also been instrumental in helping launch our &lt;a href=&quot;https://iot.eclipse.org/testbeds/&quot;&gt;Eclipse IoT Open Testbeds&lt;/a&gt;.  Red Hat understands that for IoT to be successful it needs to integrate OT and IT. They are on the path to being a leader in this space.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next 2-3 years are going to be very exciting for the IoT industry and in particular the Eclipse IoT community. We have the technology and individuals that are making a difference and delivering real and valuable technology for IoT solution developers. It is very exciting to have these 3 companies help lead the way to our continued success and momentum.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4150/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4150/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4150&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/t6971F-tZEQ&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 25 May 2017 17:48:18 +0000</pubDate>
</item>
<item>
	<title>Kichwa Coders: Woohoo! Java 9 has a REPL! Getting Started with JShell and Eclipse January</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=2261</guid>
	<link>https://kichwacoders.com/2017/05/25/woohoo-java-9-has-a-repl-getting-started-with-jshell-and-eclipse-january/</link>
	<description>&lt;p&gt;With Java 9 just around the corner, we explore one of its most exciting new features – the Java 9 REPL (&lt;a href=&quot;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;Read-Eval-Print Loop&lt;/a&gt;). This REPL is called JShell and it’s a great addition to the Java platform. Here’s why.&lt;/p&gt;
&lt;p&gt;With JShell you can easily try out new features and quickly check the behaviour of a section of code. You don’t have to create a long-winded dummy main or JUnit test – simply type away.  To demonstrate the versatility of JShell, I am going to use it in conjunction with the Eclipse January package for data structures. Eclipse January is a set of libraries for handling numerical data in Java, think of it as a ‘numpy for Java’.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Install JShell&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;JShell is part of Java 9, currently available in an Early Access version from Oracle and other sources. Download and install Java 9 JDK from &lt;a href=&quot;http://jdk.java.net/9/&quot;&gt;http://jdk.java.net/9/&lt;/a&gt; or, if you have it available on your platform, you can install with your package manager (e.g. &lt;code&gt;sudo apt-get install openjdk-9-jdk&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Start a terminal and run JShell:&lt;img alt=&quot;capture1&quot; class=&quot;alignnone size-full wp-image-2269&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/05/capture1.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, JShell allows you to type normal Java statements, leave off semi-colons, run expressions, access expressions from previous outputs, and achieve many other short-cuts. (You can exit JShell with Ctrl-D.)&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Using JShell with Eclipse January&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To use Eclipse January, you need to:&lt;/p&gt;
&lt;p&gt;1. Download January:&lt;/p&gt;
&lt;p&gt;Get the &lt;a href=&quot;http://download.eclipse.org/january/releases/2.0.1/repository/plugins/org.eclipse.january_2.0.1.v201703300842.jar&quot;&gt;January 2.0.1 jar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;2. Download the dependency jars:&lt;/p&gt;
&lt;p&gt;The January dependencies are available from &lt;a href=&quot;http://download.eclipse.org/tools/orbit/downloads/drops/R20170516192513/&quot;&gt;Eclipse Orbit&lt;/a&gt;, they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://download.eclipse.org/tools/orbit/downloads/drops2/R20170516192513/repository/plugins/org.slf4j.api_1.7.10.v20170428-1633.jar&quot;&gt;org.slf4j.api – 1.7.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://download.eclipse.org/tools/orbit/downloads/drops2/R20170516192513/repository/plugins/org.slf4j.binding.nop_1.7.10.v20160301-1109.jar&quot;&gt;org.slf4j.binding.nop  – 1.7.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://download.eclipse.org/tools/orbit/downloads/drops2/R20170516192513/repository/plugins/org.apache.commons.math3_3.5.0.v20160301-1110.jar&quot;&gt;org.apache.commons.math3 – 3.5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://download.eclipse.org/tools/orbit/downloads/drops/R20170303204511/repository/plugins/org.apache.commons.lang_2.6.0.v201404270220.jar&quot;&gt;org.apache.commons.lang – 2.6.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3. Run JShell again, but add to the classpath all the jars you downloaded (remember to be the in the directory you downloaded the jars to):&lt;/p&gt;
&lt;p&gt;Windows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&quot;c:\Program Files\Java\jdk-9\bin\jshell.exe&quot;  --class-path org.eclipse.january_2.0.1.v201703300842.jar;org.apache.commons.lang_2.6.0.v201404270220.jar;org.apache.commons.math3_3.5.0.v20160301-1110.jar;org.slf4j.api_1.7.10.v20170428-1633.jar;org.slf4j.binding.nop_1.7.10.v20160301-1109.jar&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jshell --class-path org.eclipse.january_2.0.1.v201703300842.jar:org.apache.commons.lang_2.6.0.v201404270220.jar:org.apache.commons.math3_3.5.0.v20160301-1110.jar:org.slf4j.api_1.7.10.v20170428-1633.jar:org.slf4j.binding.nop_1.7.10.v20160301-1109.jar&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Some notes:&lt;br /&gt;
Some version of jshell the command line argument is called &lt;code&gt;-classpath&lt;/code&gt; instead of &lt;code&gt;--class-path&lt;/code&gt;&lt;br /&gt;
If you are using git bash as your shell on Windows, add &lt;code&gt;winpty&lt;/code&gt; before calling jshell and use colons to separate the path elements.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;capture2&quot; class=&quot;alignnone size-full wp-image-2270&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/05/capture2.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Then you can run through the different types of January commands. Note JShell supports completions using the ‘Tab’ key. Also use &lt;code&gt;/!&lt;/code&gt; to rerun the last command.&lt;/p&gt;
&lt;h2&gt;Import classes&lt;/h2&gt;
&lt;p&gt;Start by importing the needed classes:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import org.eclipse.january.dataset.*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(No need for semi-colons and you can use the normally ill-advised * import)&lt;/p&gt;
&lt;h2&gt;Array Creation&lt;/h2&gt;
&lt;p&gt;Eclipse January supports straightforward creation of arrays. Let’s say we want to create a 2-dimensional array with the following data:&lt;/p&gt;
&lt;pre&gt;[1.0, 2.0, 3.0,
 4.0, 5.0, 6.0,
 7.0, 8.0, 9.0]&lt;/pre&gt;
&lt;p&gt;First we can create a new dataset:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset dataset = DatasetFactory.createFromObject(new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 })&lt;br /&gt;
System.out.println(dataset.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This gives us a 1-dimensional array with 9 elements, as shown below:&lt;/p&gt;
&lt;pre&gt;[1.0000000, 2.0000000, 3.0000000, 4.0000000, 5.0000000, 6.0000000, 7.0000000, 8.0000000, 9.0000000]
&lt;/pre&gt;
&lt;p&gt;We then need to reshape it to be a 3×3 array:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dataset = dataset.reshape(3, 3)&lt;br /&gt;
System.out.println(dataset.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The reshaped dataset:&lt;/p&gt;
&lt;pre&gt; [[1.0000000, 2.0000000, 3.0000000],
 [4.0000000, 5.0000000, 6.0000000],
 [7.0000000, 8.0000000, 9.0000000]]
&lt;/pre&gt;
&lt;p&gt;Or we can do it all in just one step:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset another = DatasetFactory.createFromObject(new double[] { 1, 1, 2, 3, 5, 8, 13, 21, 34 }).reshape(3, 3)&lt;br /&gt;
System.out.println(another.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Another dataset:&lt;/p&gt;
&lt;pre&gt; [[1.0000000, 1.0000000, 2.0000000],
 [3.0000000, 5.0000000, 8.0000000],
 [13.000000, 21.000000, 34.000000]]
&lt;/pre&gt;
&lt;p&gt;There are methods for obtaining the shape and number of dimensions of datasets&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dataset.getShape()&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;dataset.getRank()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which gives us:&lt;/p&gt;
&lt;pre&gt;jshell&amp;gt; dataset.getShape()
$8 ==&amp;gt; int[2] { 3, 3 }

jshell&amp;gt; dataset.getRank()
$9 ==&amp;gt; 2&lt;/pre&gt;
&lt;p&gt;Datasets also provide functionality for ranges and a random function that all allow easy creation of arrays:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset dataset = DatasetFactory.createRange(15, Dataset.INT32).reshape(3, 5)&lt;br /&gt;
System.out.println(dataset.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;[[0, 1, 2, 3, 4],
 [5, 6, 7, 8, 9],
 [10, 11, 12, 13, 14]]
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
import org.eclipse.january.dataset.Random //specify Random class (see this is why star imports are normally bad)&lt;br /&gt;
Dataset another = Random.rand(new int[]{3,5})&lt;br /&gt;
System.out.println(another.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;[[0.27243843, 0.69695728, 0.20951172, 0.13238926, 0.82180144],
 [0.56326222, 0.94307839, 0.43225034, 0.69251040, 0.22602319],
 [0.79244049, 0.15865358, 0.64611131, 0.71647195, 0.043613393]]
&lt;/pre&gt;
&lt;h2&gt;Array Operations&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january/src/org/eclipse/january/dataset/Maths.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;org.eclipse.january.dataset.Maths&lt;/a&gt; provides rich functionality for operating on the Dataset classes. For instance, here’s how you could add 2 Dataset arrays:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset add = Maths.add(dataset, another)&lt;br /&gt;
System.out.println(add.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or you could do it as an inplace addition. The example below creates a new 3×3 array and then adds 100 to each element of the array.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset inplace = DatasetFactory.createFromObject(new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }).reshape(3, 3)&lt;br /&gt;
inplace.iadd(100)&lt;br /&gt;
System.out.println(inplace.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;[[101.0000000, 102.0000000, 103.0000000],
 [104.0000000, 105.0000000, 106.0000000],
 [107.0000000, 108.0000000, 109.0000000]]&lt;/pre&gt;
&lt;h2&gt;Slicing&lt;/h2&gt;
&lt;p&gt;Datasets simplify extracting portions of the data, known as ‘slices’. For instance, given the array below, let’s say we want to extract the data 2, 3, 5 and 6.&lt;/p&gt;
&lt;pre&gt;[1, 2, 3,
 4, 5, 6,
 7, 8, 9]
&lt;/pre&gt;
&lt;p&gt;This data resides in the first and second rows and the second and third columns. For slicing, indices for rows and columns are zero-based. A basic slice consists of a start and stop index, where the start index is inclusive and the stop index is exclusive. An optional increment may also be specified. So this example would be expressed as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dataset dataset = DatasetFactory.createFromObject(new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }).reshape(3, 3)&lt;br /&gt;
System.out.println(dataset.toString(true))&lt;br /&gt;
Dataset slice = dataset.getSlice(new Slice(0, 2), new Slice(1, 3))&lt;br /&gt;
System.out.println(slice.toString(true))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;slice of dataset:&lt;/p&gt;
&lt;pre&gt;[[2.0000000, 3.0000000],
 [5.0000000, 6.0000000]]
&lt;/pre&gt;
&lt;p&gt;Slicing and array manipulation functionality is particularly valuable when dealing with 3-dimensional or n-dimensional data.&lt;/p&gt;
&lt;h2&gt;Wrap-Up&lt;/h2&gt;
&lt;p&gt;For more on Eclipse January see the following examples and give them a go in JShell:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january.examples/src/org/eclipse/january/examples/dataset/NumpyExamples.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;NumPy Examples&lt;/a&gt; shows how common NumPy constructs map to Eclipse Datasets.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january.examples/src/org/eclipse/january/examples/dataset/SlicingExamples.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Slicing Examples&lt;/a&gt; demonstrates slicing, including how to slice a small amount of data out of a dataset too large to fit in memory all at once.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january.examples/src/org/eclipse/january/examples/dataset/ErrorExamples.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Error Examples&lt;/a&gt; demonstrates applying an error to datasets.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january.examples/src/org/eclipse/january/examples/dataset/IterationExamples.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Iteration Examples&lt;/a&gt; demonstrates a few ways to iterate through your datasets.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/january/blob/master/org.eclipse.january.examples/src/org/eclipse/january/examples/dataset/LazyExamples.java&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Lazy Examples&lt;/a&gt; demonstrates how to use datasets which are not entirely loaded in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eclipse January is a ‘numpy for Java’ but until now users have not really been able to play around with it in the same way you would numpy in Python. &lt;/p&gt;
&lt;p&gt;JShell provides a great way to test drive libraries like Eclipse January. There are a couple of features that would be nice-to-have such as a magic variable for the last result (maybe &lt;code&gt;$_&lt;/code&gt; or &lt;code&gt;$!&lt;/code&gt;) and maybe a shorter way to print a result (maybe &lt;code&gt;/p&lt;/code&gt; :-). But overall, it is great to have and finally gives Java the REPL and ability to be used interactively that many have gotten so used to with other programming languages. &lt;/p&gt;
&lt;p&gt;In fact we will be making good use of JShell for the Eclipse January workshop being held at EclipseCon France, see details and register here:  &lt;a href=&quot;https://www.eclipsecon.org/france2017/session/eclipse-january&quot;&gt;https://www.eclipsecon.org/france2017/session/eclipse-january&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;eclipseConV2&quot; class=&quot;alignnone size-full wp-image-2308&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/05/eclipseconv2.jpg?w=840&quot; /&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/2261/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/2261/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=2261&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 25 May 2017 14:12:44 +0000</pubDate>
</item>
<item>
	<title>Dave Carver: The State of Android and Eclipse</title>
	<guid isPermaLink="false">http://intellectualcramps.wordpress.com/?p=1135</guid>
	<link>https://intellectualcramps.wordpress.com/2017/05/25/the-state-of-android-and-eclipse/</link>
	<description>&lt;p&gt;So it has been a while since I posted an update of where things stand.  Honestly, not a lot has changed on the eclipse front.  We still don’t have built in AAR support, there is no integrated Gradle support between Buildship and Andmore, we are behind on Nougat support, and O is fast approaching release status.   With that said, there have been a few bug fixes contributed by the community, which were released as a maintenance release, but the larger corporate adoption… is pretty much non-existent from a contribution stand point.&lt;/p&gt;
&lt;p&gt;The later I’m not sure how to fix, as I whole heartily believe that Andmore needs a corporate backer and sponsor to fund things.   This could probably be avoided if several people that really have an itch to fix the base wanted to scratch it.   There is a lot to work on that it can be a bit overwhelming to figure out where to start.&lt;/p&gt;
&lt;p&gt;When Google had announced a couple years ago that Android Development Tools would not be maintained any longer, I had that itch to see if I could at least get it and the Moto Dev Studio tools to a place where it would have a chance to survive.  I managed to scratch that and over the next year with the help of several other committers bring you Andmore 0.5.0.   Believe me the most difficult work has been done, and that is getting everything through the IP process, what is there is clean from that stand point.&lt;/p&gt;
&lt;p&gt;So the general question now that Andmore is at the Eclipse Foundation, is there a dire need from the community to have Android tooling?   There was much outrage and yelling when Google made the decision to move to Intellij, some of it rightfully deserved some of it just background noise.   Regardless of the reasons, Android Tooling was always a Google controlled and sponsored project, it was open source in really name only (it took nearly 2 years for Doug’s CDT integration to be integrated into the core).   The same is happening with Android Studio, it is controlled and dominated by Google and is really open source in name only.  If Google decides for whatever reason that they want to move all development to the cloud and abandon Android Studio and Intellij, there is nothing that anyone will be able to do to prevent it.  The difference though is, that Jet Brains will pickup and continue developing Android support themselves.  Why, because they have a financial interest to make sure their IDE supports it for their corporate customers.&lt;/p&gt;
&lt;p&gt;This brings us back to the question… Does the community really want Android tooling built off the eclipse platform?   If so, how do we improve it, given that right now, this is largely a volunteer effort.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/intellectualcramps.wordpress.com/1135/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/intellectualcramps.wordpress.com/1135/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=intellectualcramps.wordpress.com&amp;amp;blog=20154979&amp;amp;post=1135&amp;amp;subd=intellectualcramps&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 25 May 2017 12:55:04 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: The Containerization of Dev Environments</title>
	<guid isPermaLink="false">https://cdtdoug.ca/?p=845</guid>
	<link>https://cdtdoug.ca/2017/05/24/the-containerization-of-dev-environments/</link>
	<description>&lt;p&gt;As a veteran tools architect working for a veteran embedded systems platform vendor, we’re getting pretty good at building cross development environments. You get all the speed and integration with other native tools that today’s rich host platforms can provide. Combine that that with a good installer and software maintenance tool, and it’s super simple for users to get setup and keep their installs updated with the latest fixes and patches. It’s worked for many years.&lt;/p&gt;
&lt;p&gt;So of course, I was a bit taken back with recent talk about delivering development environments in containers and distributing them to users for use with cloud IDEs. The claim is that the installation process is simpler. But I have to ask, while yes it is simpler for the provider, is it also &lt;span style=&quot;font-size: 1rem;&quot;&gt;simpler for the user?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I work with embedded software engineers. Their systems are complex and the last thing they want to do is fight with their tools. That doesn’t pay the bills. And that’s why we work so hard to make that management simpler. And if you don’t have the experience creating cross development environments, it is certainly appealing to only have to worry about one host platform, 64-bit Linux, as you do with Docker which, BTW, just happens to be the easiest to support especially relative to Windows.&lt;/p&gt;
&lt;p&gt;But do I really have to teach my embedded developer customers about Docker? How to clean up images as updates are delivered? How to start and stop containers, and in the case of Windows and Mac, the VMs that run those containers? And that’s not to mention cloud environments which are a whole new level requiring server management, especially as the developer community scales. Embedded development tools require a lot of horsepower. How many users can a server actually support and how do customers support the burstiness of demand?&lt;/p&gt;
&lt;p&gt;So, while I get it, and as vendors take this path and as users do get used to it, I do need to be prepared to support such environments. I’ll just feel a bit sad that we are giving up on providing our users the great experiences that native cross development tools provide.&lt;/p&gt;</description>
	<pubDate>Wed, 24 May 2017 15:38:08 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: Fuse and BRMS Tooling Maintenance Release for Neon.3</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/integration-stack-4.4.3.Final.html</guid>
	<link>https://tools.jboss.org/blog/integration-stack-4.4.3.Final.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Try our complete Eclipse-Neon capable, Devstudio 10.4.0 compatible integration tooling.&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;jbosstools jbdevstudio blog header&quot; src=&quot;https://tools.jboss.org/blog/images/jbosstools-jbdevstudio-blog-header.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;JBoss Tools Integration Stack 4.4.3.Final / JBoss Developer Studio Integration Stack 10.3.0.GA&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      All of the Integration Stack components have been verified to work with the same dependencies as JBoss Tools 4.4 and Developer Studio 10.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-s-new-for-this-release&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-s-new-for-this-release&quot;&gt;&lt;/a&gt;What’s new for this release?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release syncs up with Devstudio 10.4.0, JBoss Tools 4.4.4 and Eclipse Neon.3.  It is also a maintenance release for Fuse Tooling, SwitchYard and the BRMS tooling.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;released-tooling-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#released-tooling-highlights&quot;&gt;&lt;/a&gt;Released Tooling Highlights&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;jboss-fuse-development-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-fuse-development-highlights&quot;&gt;&lt;/a&gt;JBoss Fuse Development Highlights&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;fuse-tooling-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling-highlights&quot;&gt;&lt;/a&gt;Fuse Tooling Highlights&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.3/html/10.3.0_release_notes_and_known_issues/resolved_issues&quot;&gt;Fuse Tooling 9.2.0.Final Resolved Issues Section&lt;/a&gt; of the Integration Stack 10.3.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;switchyard-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#switchyard-highlights&quot;&gt;&lt;/a&gt;SwitchYard Highlights&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.3/html/10.3.0_release_notes_and_known_issues/resolved_issues#switchyard_2_3_1_final_2&quot;&gt;SwitchYard 2.3.1.Final Resolved Issues Section&lt;/a&gt; of the Integration Stack 10.3.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;jboss-business-process-and-rules-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-business-process-and-rules-development&quot;&gt;&lt;/a&gt;JBoss Business Process and Rules Development&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;bpmn2-modeler-known-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#bpmn2-modeler-known-issues&quot;&gt;&lt;/a&gt;BPMN2 Modeler Known Issues&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.3/html/10.3.0_release_notes_and_known_issues/known_issues#bpmn2_1_3_3_final_1_3_1_final&quot;&gt;BPMN2 1.3.3.Final Known Issues Section&lt;/a&gt; of the Integration Stack 10.3.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;drools-jbpm6-known-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#drools-jbpm6-known-issues&quot;&gt;&lt;/a&gt;Drools/jBPM6 Known Issues&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.3/html/10.3.0_release_notes_and_known_issues/known_issues#drools_6_5_1_final&quot;&gt;Drools 6.5.1.Final Known Issues Section&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;data-virtualization-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#data-virtualization-highlights&quot;&gt;&lt;/a&gt;Data Virtualization Highlights&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;teiid-designer-known-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#teiid-designer-known-issues&quot;&gt;&lt;/a&gt;Teiid Designer Known Issues&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.3/html/10.3.0_release_notes_and_known_issues/known_issues#teiid_designer_11_0_1_final&quot;&gt;Teiid Designer 11.0.1.Final Resolved Issues Section&lt;/a&gt; of the Integration Stack 10.1.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-s-an-integration-stack&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-s-an-integration-stack&quot;&gt;&lt;/a&gt;What’s an Integration Stack?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Red Hat JBoss Developer Studio Integration Stack is a set of Eclipse-based development tools. It further enhances the IDE functionality provided by JBoss Developer Studio, with plug-ins specifically for use when developing for other Red Hat JBoss products.  It’s where the Fuse Tooling, DataVirt Tooling and BRMS tooling is aggregated.  The following frameworks are supported:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-fuse-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-fuse-development&quot;&gt;&lt;/a&gt;JBoss Fuse Development&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/apachecamel.html&quot;&gt;Fuse Tooling&lt;/a&gt; - JBoss Fuse Development provides tooling for Red Hat JBoss Fuse.  It features the latest versions of the Fuse Data Transformation tooling, Fuse Integration Services support, SwitchYard and access to the Fuse SAP Tool Suite.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/switchyard.html&quot;&gt;SwitchYard&lt;/a&gt; - A lightweight service delivery framework providing full lifecycle support for developing, deploying, and managing service-oriented applications.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-business-process-and-rules-development-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-business-process-and-rules-development-2&quot;&gt;&lt;/a&gt;JBoss Business Process and Rules Development&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Business Process and Rules Development plug-ins provide design, debug and testing tooling for developing business processes for Red Hat JBoss BRMS and Red Hat JBoss BPM Suite.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/bpel.html&quot;&gt;BPEL Designer&lt;/a&gt; - Orchestrating your business processes.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/bpmn2.html&quot;&gt;BPMN2 Modeler&lt;/a&gt; - A graphical modeling tool which allows creation and editing of Business Process Modeling Notation diagrams using graphiti.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/drools.html&quot;&gt;Drools&lt;/a&gt; - A Business Logic integration Platform which provides a unified and integrated platform for Rules, Workflow and Event Processing including KIE.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/jbpm.html&quot;&gt;jBPM6&lt;/a&gt; - A flexible Business Process Management (BPM) suite.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-data-virtualization-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-data-virtualization-development&quot;&gt;&lt;/a&gt;JBoss Data Virtualization Development&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Data Virtualization Development plug-ins provide a graphical interface to manage various aspects of Red Hat JBoss Data Virtualization instances, including the ability to design virtual databases and interact with associated governance repositories.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/teiiddesigner.html&quot;&gt;Teiid Designer&lt;/a&gt; - A visual tool that enables rapid, model-driven definition, integration, management and testing of data services without programming using the Teiid runtime framework.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-integration-and-soa-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-integration-and-soa-development&quot;&gt;&lt;/a&gt;JBoss Integration and SOA Development&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Integration and SOA Development plug-ins provide tooling for developing, configuring and deploying BRMS, SwitchYard and Fuse applications to Red Hat JBoss Fuse and Fuse Fabric containers, Apache ServiceMix, and Apache Karaf instances.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;All of the Business Process and Rules Development plugins, plus…​&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/apachecamel.html&quot;&gt;Fuse Apache Camel Tooling&lt;/a&gt; - A graphical tool for integrating software components that works with Apache ServiceMix, Apache ActiveMQ, Apache Camel and the FuseSource distributions.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/switchyard.html&quot;&gt;SwitchYard&lt;/a&gt; - A lightweight service delivery framework providing full lifecycle support for developing, deploying, and managing service-oriented applications.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;the-jboss-tools-website-features-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#the-jboss-tools-website-features-tab&quot;&gt;&lt;/a&gt;The JBoss Tools website features tab&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Don’t miss the &lt;a href=&quot;https://tools.jboss.org/features&quot;&gt;Features tab&lt;/a&gt; for up to date information on your favorite Integration Stack components.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The easiest way to install the Integration Stack components is through the &lt;a href=&quot;https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&amp;amp;product=jbossdeveloperstudio&amp;amp;version=6.3.0&amp;amp;productChanged=yes&quot;&gt;stand-alone installer&lt;/a&gt;.  If you’re interested specifically in Fuse we have the all-in-one installer &lt;a href=&quot;https://developers.redhat.com/download-manager/file/devstudio-integration-stack-10.3.0.GA-fuse-installer-runtime.jar&quot;&gt;JBoss Fuse Tooling + JBoss Fuse/Karaf runtime&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For a complete set of Integration Stack installation instructions, see &lt;a href=&quot;https://access.redhat.com/documentation/en/red-hat-jboss-developer-studio-integration-stack/10.0/paged/installation-guide/&quot;&gt;Integration Stack Installation Instructions&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Give it a try!&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Paul Leacu.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 24 May 2017 14:03:19 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools and Red Hat Developer Studio Maintenance Release for Eclipse Neon.3</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/10.4.0.ga-for-neon.3.html</guid>
	<link>https://tools.jboss.org/blog/10.4.0.ga-for-neon.3.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/neon/4.4.4.Final.html&quot;&gt;JBoss Tools 4.4.4&lt;/a&gt; and &lt;a href=&quot;https://tools.jboss.org/downloads/devstudio/neon/10.4.0.GA.html&quot;&gt;Red Hat JBoss Developer Studio 10.4&lt;/a&gt; for Eclipse Neon.3 are here waiting for you. Check it out!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;devstudio10&quot; src=&quot;https://tools.jboss.org/blog/images/devstudio10.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Developer Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href=&quot;https://developers.redhat.com/products/devstudio&quot;&gt;Red Hat developers&lt;/a&gt; and run it like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;java -jar devstudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) JBoss Developer Studio require a bit more:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release requires at least Eclipse 4.6.3 (Neon.3) but we recommend
      using the latest &lt;a href=&quot;http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/neon3&quot;&gt;Eclipse 4.6.3 Neon JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &quot;JBoss Tools&quot; or &quot;Red Hat JBoss Developer Studio&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;http://download.jboss.org/jbosstools/neon/stable/updates/&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is new?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our main focus for this release was improvements for container based development and bug fixing.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;improved-openshift-3-and-docker-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#improved-openshift-3-and-docker-tools&quot;&gt;&lt;/a&gt;Improved OpenShift 3 and Docker Tools&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We continue to work on providing better experience for container based development in JBoss Tools and Developer Studio. Let’s go through a few interesting updates here.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-server-adapter-enhanced-flexibility&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-server-adapter-enhanced-flexibility&quot;&gt;&lt;/a&gt;OpenShift Server Adapter enhanced flexibility&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;OpenShift server adapter is a great tool that allows developers to synchronize local changes in the Eclipse workspace with running pods in the
      OpenShift cluster. It also allows you to remote debug those pods when the server adapter is launched in Debug mode.
      The supported stacks are Java and NodeJS.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As pods are ephemeral OpenShift resources, the server adapter definition was based on an OpenShift service resource and the pods are then
      dynamically computed from the service selector.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This has a major drawback as it allows to use this feature only for pods that are part of a service, which may be logical for Web based applications
      as a route (and thus a service) is required in order to access the application.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, it is now possible to create a server adapter from the following OpenShift resources:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;service (as before)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;deployment config&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;replication controller&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;pod&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If a server adapter is created from a pod, it will be created from the associated OpenShift resource, in the preferred order:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;service&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;deployment config&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;replication controller&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As the OpenShift explorer used to display OpenShift resources that were linked to a service, it has been enhanced as well.
      It now displays resources linked to a deployment config or replication controller.
      Here is an example of a deployment with no service ie a deployment config:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, as an OpenShift server adapter can be created from different kind of resources, the kind of associated resource is displayed when
      creating the OpenShift server adapter:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced1.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once created, the kind of OpenShift resource adapter is also displayed in the Servers view:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced2.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This information is also available from the server editor:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced3&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced3.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;security-vulnerability-fixed-in-certificate-validation-database&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#security-vulnerability-fixed-in-certificate-validation-database&quot;&gt;&lt;/a&gt;Security vulnerability fixed in certificate validation database&lt;/h4&gt;
      &lt;div class=&quot;admonitionblock important&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When you use the OpenShift tooling to connect to an OpenShift API server, the certificate of the OpenShift API server
      is first validated. If the issuer authority is a known one, then the connection is then established. If the issuer is an
      unknown one, a validation dialog is first shown to the user with the details of the OpenShift API server certificate as well
      as the details of the issuer authority. If the user accepts it, then the connection is established. There is also an option to
      store the certificate in a database so that next time a connection is attempted to the same OpenShift API server, then the certificate
      will be considered valid an no validation dialog will be show again.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;certificate validation dialog&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/certificate-validation-dialog.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We found a security vulnerability as the certificate was wrongly stored: it was partially stored (not all attributes were stored) so we may
      interpret a different certificate as validated where it should not.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We had to change the format of the certificate database. As the certificates stored in the previous database were not entirelly stored, there was
      no way to provide a migration path. As a result, after the upgrade, the certificate database will be empty. So if you had previously accepted some
      certificates, then you need to accept them again and fill the certificate database again.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;cdk-3-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#cdk-3-server-adapter&quot;&gt;&lt;/a&gt;CDK 3 Server Adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The CDK 3 server adapter has been here for quite a long time. It used to be Tech Preview as CDK 3 was not officially released. It is now officially available.
      While the server adapter itself has limited functionality, it is able to start and stop the CDK virtual machine via its minishift binary.
      Simply hit Ctrl+3 (Cmd+3 on OSX) and type CDK, that will bring up a command to setup and/or launch the CDK server adapter.
      You should see the old CDK 2 server adapter along with the new CDK 3 one (labeled &lt;strong&gt;Red Hat Container Development Kit 3&lt;/strong&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter5&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter5.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;All you have to do is set the credentials for your Red Hat account and the location of the CDK’s minishift binary file and the type of virtualization hypervisor.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter1.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you’re finished, a new CDK Server adapter will then be created and visible in the Servers view.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter2.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once the server is started, Docker and OpenShift connections should appear in their respective views, allowing the user to quickly create a new Openshift application and begin developing their AwesomeApp in a highly-replicable environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter3&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter3.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter4&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter4.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-container-platform-3-5-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-container-platform-3-5-support&quot;&gt;&lt;/a&gt;OpenShift Container Platform 3.5 support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;OpenShift Container Platform (OCP) 3.5 has been
      &lt;a href=&quot;https://www.redhat.com/en/about/press-releases/red-hat-brings-kubernetes-new-application-workloads-latest-version-red-hat-openshift-container-platform&quot; target=&quot;_blank&quot;&gt;announced&lt;/a&gt; by Red Hat.
      JBossTools 4.4.4.Final has been validated against OCP 3.5.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-server-adapter-extensibility&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-server-adapter-extensibility&quot;&gt;&lt;/a&gt;OpenShift server adapter extensibility&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The OpenShift server adapter had long support for EAP/Wildfly and NodeJS based deployments. It turns out that it does a great deal of synchronizing
      local workspace changes to remote deployments on OpenShift which have been standardized through images metadata (labels). But each runtime has its
      own specific. As an example, Wildfly/EAP deployments requires that a re-deploy trigger is sent after the files have been synchronized.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In order to reduce the technical debt and allow support for other runtimes (lots of them in the microservice world), we have refactored the OpenShift
      server adapter so that each runtime specific is now isolated and that it will be easy and safe to add support for new runtime.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For a full in-depth description, see the following &lt;a href=&quot;https://github.com/jbosstools/jbosstools-openshift/wiki/Openshift-server-adapter-profile-and-its-subsystems&quot;&gt;wiki page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;pipeline-builds-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#pipeline-builds-support&quot;&gt;&lt;/a&gt;Pipeline builds support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pipeline based builds are now supported by the OpenShift tooling.
      When creating an application, if using a template, if one of the builds is based on pipeline, you can view the detail
      of the pipeline:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;pipeline wizard&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/pipeline-wizard.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When your application is deployed, you can see the details of the build configuration for the pipeline based builds:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;pipeline details&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/pipeline-details.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;More to come as we are improving the pipeline support in the OpenShift tooling.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;update-of-docker-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#update-of-docker-client&quot;&gt;&lt;/a&gt;Update of Docker Client&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The level of the underlying com.spotify.docker.client plug-in used to access the Docker daemon has been upgraded to 3.6.8.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;run-image-network-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#run-image-network-support&quot;&gt;&lt;/a&gt;Run Image Network Support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new page has been added to the Docker Run Image Wizard and Docker Run Image Launch configuration that allows
      the end-user to specify the network mode to use.  A user can choose from Default, Bridge, Host, None, Container,
      or Other.  If Container is selected, the user must choose from an active Container to use the same network mode.
      If Other is specified, a named network can be specified.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Network Mode&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerNetworkMode.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Network Mode Configuration&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerRunConfigNetworkMode.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;refresh-connection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#refresh-connection&quot;&gt;&lt;/a&gt;Refresh Connection&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Users can now refresh the entire connection from the Docker Explorer View.  Refresh can be performed two ways:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;using the right-click context menu from the Connection&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;using the Refresh menu button when the Connection is selected&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Refresh Connection&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerRefreshConnection.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#server-tools&quot;&gt;&lt;/a&gt;Server Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;api-change-in-jmx-ui-s-new-connection-wizard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#api-change-in-jmx-ui-s-new-connection-wizard&quot;&gt;&lt;/a&gt;API Change in JMX UI’s New Connection Wizard&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While hardly something most users will care about, extenders may need to be aware that the API for adding connection types to the &amp;amp;aposNew JMX Connection&amp;amp;apos wizard in the &amp;amp;aposJMX Navigator&amp;amp;apos has changed.  Specifically, the &amp;amp;aposorg.jboss.tools.jmx.ui.providerUI&amp;amp;apos extension point has been changed. While previously having a child element called &amp;amp;aposwizardPage&amp;amp;apos, it now requires a &amp;amp;aposwizardFragment&amp;amp;apos.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A &amp;amp;aposwizardFragment&amp;amp;apos is part of the &amp;amp;aposTaskWizard&amp;amp;apos framework first used in WTP’s ServerTools, which has, for a many years, been used throughout JBossTools. This framework allows wizard workflows where the set of pages to be displayed can change based on what selections are made on previous pages.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This change was made as a direct result of a bug caused by the addition of the Jolokia connection type in which some standard workflows could no longer be completed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This change only affects adopters and extenders, and should have no noticable change for the user, other than that the below bug has been fixed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;hibernate-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-tools&quot;&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;hibernate-runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-runtime-provider-updates&quot;&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime  providers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;hibernate-runtime-provider-updates-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-runtime-provider-updates-2&quot;&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.0 runtime provider now incorporates Hibernate Core version 5.0.12.Final and Hibernate Tools version 5.0.5.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.1 runtime provider now incorporates Hibernate Core version 5.1.4.Final and Hibernate Tools version 5.1.3.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.2 runtime provider now incorporates Hibernate Core version 5.2.8.Final and Hibernate Tools version 5.2.2.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;forge-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-tools&quot;&gt;&lt;/a&gt;Forge Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;forge-runtime-updated-to-3-6-1-final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-runtime-updated-to-3-6-1-final&quot;&gt;&lt;/a&gt;Forge Runtime updated to 3.6.1.Final&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The included Forge runtime is now 3.6.1.Final. Read the official announcement &lt;a href=&quot;http://forge.jboss.org/news/jboss-forge-3.6.1.final-is-here&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;startup&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/forge/images/4.4.4.AM3/startup.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-next&quot;&gt;&lt;/a&gt;What is next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Having JBoss Tools 4.4.4 and Developer Studio 10.4 out we are already working on the next release for Eclipse Oxygen.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 24 May 2017 12:22:21 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: Registration opens now! – Eclipse DemoCamp Oxygen 2017</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=28201</guid>
	<link>http://eclipsesource.com/blogs/2017/05/24/registration-opens-now-eclipse-democamp-oxygen-2017/</link>
	<description>&lt;p&gt;Eclipse DemoCamp Oxygen 2017 on June 28th 2017 – Registration opens now!&lt;/p&gt;
&lt;p&gt;We are pleased to invite you to participate in the Eclipse DemoCamp Oxygen 2017. The DemoCamp Munich is one the biggest DemoCamps worldwide and therefore an excellent opportunity to showcase all the cool, new and interesting technology being built by the Eclipse community. This event is open to Eclipse enthusiasts who want to show demos of what they are doing with Eclipse.&lt;/p&gt;
&lt;p&gt;Registration open now!&lt;br /&gt;
Please click &lt;a href=&quot;https://www.eventbrite.de/e/eclipse-democamp-oxygen-2017-tickets-34566386994&quot;&gt;here&lt;/a&gt; for detailed information and the registration.&lt;/p&gt;
&lt;p&gt;Seating is limited, so please register soon if you plan to attend.&lt;br /&gt;
We look forward to welcoming you to the Eclipse DemoCamp Oxygen 2017!&lt;/p&gt;
&lt;p&gt;IMPORTANT NOTE&lt;br /&gt;
The last DemoCamps have always been sold out. Due to legal reasons, we have a fixed limit for the room and cannot overbook. However, every year some places unfortunately remain empty. Please unregister if you find you are unable to attend so we can invite participants from the waiting list. If you are not attending and have not unregistered, we kindly ask for a donation of 10 Euros to “Friends of Eclipse”. Thank you in advance for your understanding!&lt;/p&gt;
&lt;p&gt;If the event is sold out, you will be placed on the waiting list. You will be informed if a place becomes available, and you will need to confirm your attendance after we contact you.&lt;br /&gt;
If you are interested in giving a talk, please send your presentation proposal to matthias.zimmermann@bsi-software.com for consideration. There are always more proposals than slots in the agenda, so we will make a selection from the submissions.&lt;/p&gt;
&lt;p&gt;We look forward to meeting you at the Eclipse DemoCamp Oxygen 2017!&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=Registration+opens+now%21+%26%238211%3B+Eclipse+DemoCamp+Oxygen+2017&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/05/24/registration-opens-now-eclipse-democamp-oxygen-2017/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/05/24/registration-opens-now-eclipse-democamp-oxygen-2017/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/05/24/registration-opens-now-eclipse-democamp-oxygen-2017/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/05/24/registration-opens-now-eclipse-democamp-oxygen-2017/&amp;amp;t=Registration+opens+now%21+%26%238211%3B+Eclipse+DemoCamp+Oxygen+2017&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/05/24/registration-opens-now-eclipse-democamp-oxygen-2017/#respond&quot;&gt;Leave a Comment&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/democamp/&quot; title=&quot;democamp Tag&quot;&gt;democamp&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/democamp/&quot; title=&quot;democamp Tag&quot;&gt;democamp&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 24 May 2017 12:00:56 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter - Language Server Protocol 101</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/_cIQCADv_B8/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/_cIQCADv_B8/</link>
	<description>Everything you need to know about the Language Server Procotol (aka LSP) is in this month's newsletter!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/_cIQCADv_B8&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 24 May 2017 09:35:00 +0000</pubDate>
</item>
<item>
	<title>Kichwa Coders: What is it like to work in Open-source?</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=2048</guid>
	<link>https://kichwacoders.com/2017/05/24/what-is-it-like-to-work-in-open-source/</link>
	<description>&lt;blockquote&gt;&lt;p&gt;Open-source software (OSS) is computer software with its source code made available with a license in which the copyright holder provides the rights to study, change, and distribute the software to anyone and for any purpose. – Wikipedia&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&quot;Yannick_opensource&quot; class=&quot;alignnone size-full wp-image-2067&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/05/yannick_opensource.jpg?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I am Yannick Mayeur, a French computer science student currently gaining work experience at Kichwa Coders in the UK, and this is how I feel about working with Open-source.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/weekFive.md#why-open-source-&quot; id=&quot;user-content-why-open-source-&quot;&gt;&lt;/a&gt;Why Open-source ?&lt;/h2&gt;
&lt;p&gt;Let me tell you a story. A company asks someone in their software team to build some software to do a certain task. It takes him a lot of time but he manages to do it. He is the only one working on the project so there are no comments in the code nor any documentation to help maintain the code. He later leaves the company, the software slowly becomes useless as nobody else knows how to use it.&lt;/p&gt;
&lt;p&gt;If this company had created an Open-source project instead, this problem wouldn’t have occurred.&lt;/p&gt;
&lt;p&gt;Help spread Open-source – or ensure a job for life by using this guerrilla &lt;a href=&quot;https://www.se.rit.edu/~tabeec/RIT_441/Resources_files/How%20To%20Write%20Unmaintainable%20Code.pdf&quot;&gt;guide&lt;/a&gt; on how to write unmaintainable code. But seriously don’t. &lt;span id=&quot;more-2048&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/weekFive.md#get-started&quot; id=&quot;user-content-get-started&quot;&gt;&lt;/a&gt;Get started&lt;/h2&gt;
&lt;p&gt;Getting started with Open-source is fairly easy because a lot of people write guides or &lt;a href=&quot;https://github.com/yannick-mayeur/blogposts&quot;&gt;blog posts&lt;/a&gt; to help people tackle the tricky stuff like git. All you need is a computer and motivation!&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/weekFive.md#my-feeling-on-the-subject&quot; id=&quot;user-content-my-feeling-on-the-subject&quot;&gt;&lt;/a&gt;My feeling on the subject&lt;/h2&gt;
&lt;p&gt;I am now into my fifth week at Kichwa Coders, during which time I have worked on two different projects for the Eclipse Foundation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/science.january&quot;&gt;Eclipse January&lt;/a&gt; which is a set of libraries to help process a lot of data. It is mainly used by &lt;a href=&quot;http://www.diamond.ac.uk/Home.html&quot;&gt;Diamond Light Source&lt;/a&gt; scientists to process the data they get from their particle accelerator.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/cdt/&quot;&gt;Eclipse CDT&lt;/a&gt; which is an IDE for C and C++, and is used by a lot of programmers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Knowing that I contributed to two big projects that a lot of people use every day makes me kinda proud. And the truth is it wasn’t even that hard. With my not-that-big-knowledge of how to work on big projects I have contributed some changes that will have a lot of visibility such as &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=515296&quot;&gt;bug 515296&lt;/a&gt; (for more details on the bug and on how Pierre and I solved it you can read his &lt;a href=&quot;https://kichwacoders.com/2017/05/17/what-can-eclipse-developers-learn-from-team-skys-aggregation-of-marginal-gains/&quot;&gt;blog post&lt;/a&gt; about it). Because if you are experiencing a problem the chances are that other people within the community are also experiencing it – and their knowledge of it can help you solve it for everyone.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/weekFive.md#conclusion&quot; id=&quot;user-content-conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Knowing that other people can see exactly what code you wrote puts pressure on you – but in a good way. In my opinion it pushes you to give the best of yourself. But this community can also help you out when you are stuck with a problem. All this and more makes being part of an Open-source project a very satisfying experience.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/2048/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/2048/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=2048&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 24 May 2017 09:19:01 +0000</pubDate>
</item>
<item>
	<title>typefox.io: Generate Traced Code with Xtext</title>
	<guid isPermaLink="false">http://typefox.io/?p=14235</guid>
	<link>http://typefox.io/generate-traced-code-with-xtext</link>
	<description>&lt;div class=&quot;fusion-fullwidth fullwidth-box nonhundred-percent-fullwidth&quot; style=&quot;background-color: rgba(255,255,255,0); background-position: center center; padding-top: 20px; padding-right: 0px; padding-bottom: 20px; padding-left: 0px;&quot;&gt;&lt;div class=&quot;fusion-builder-row fusion-row &quot;&gt;&lt;div class=&quot;fusion-layout-column fusion_builder_column fusion_builder_column_1_1  fusion-one-full fusion-column-first fusion-column-last 1_1&quot; style=&quot;margin-top: 0px; margin-bottom: 20px;&quot;&gt;
			&lt;div class=&quot;fusion-column-wrapper&quot;&gt;
				&lt;p&gt;Xtext 2.12 is released on May 26th. As described in its &lt;a href=&quot;https://www.eclipse.org/Xtext/releasenotes.html&quot;&gt;release notes&lt;/a&gt;, a main novelty is an API for tracing generated code.&lt;/p&gt;
&lt;h2&gt;Why Tracing?&lt;/h2&gt;
&lt;p&gt;Whenever you transpile code from one language to another, you need some kind of mapping that instructs the involved tools how to navigate from a piece of source code to the respective target code and back. In a debugging session, for example, developers can get quite frustrated if they have to step through the generated code and then try to understand where the problem is in their original source. Allowing to debug directly in the source code saves time and frustration, so it’s definitely the way to go.&lt;/p&gt;
&lt;p&gt;For transpiled JVM languages such as &lt;a href=&quot;http://xtend-lang.org&quot;&gt;Xtend&lt;/a&gt;, the &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=45&quot;&gt;JSR 45 specification&lt;/a&gt; defines how to map byte code to the source. For languages that target JavaScript, such as TypeScript or CoffeeScript, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map&quot;&gt;source maps&lt;/a&gt; are generated by the compiler and then processed by the development tools of the web browser. The DSL framework &lt;a href=&quot;http://xtext.org&quot;&gt;Xtext&lt;/a&gt; offers an API to access tracings between source and target code for any language created with Xtext. Xbase languages such as Xtend make use of such tracings automatically, but for other languages the computation of tracing information had to be added manually to the code generator with Xtext 2.11 and earlier versions.&lt;/p&gt;
&lt;h2&gt;Tracing Xtend Templates&lt;/h2&gt;
&lt;p&gt;The examples shown in this post are &lt;a href=&quot;https://github.com/TypeFox/tracing_codegen&quot;&gt;available on GitHub&lt;/a&gt;. They are based on a simple Xtext language that describes classes with properties and operations.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The examples are implemented in &lt;a href=&quot;http://xtend-lang.org&quot;&gt;Xtend&lt;/a&gt;, a language that is perfectly suited to writing code generators. Among other things, it features &lt;a href=&quot;https://www.eclipse.org/xtend/documentation/203_xtend_expressions.html#templates&quot;&gt;template expressions&lt;/a&gt; with smart whitespace handling and embedded conditionals and loops. Here’s an excerpt of the &lt;a href=&quot;https://github.com/TypeFox/tracing_codegen/blob/master/eclipse/io.typefox.traceexample.eclipse/src/io/typefox/traceexample/eclipse/generator/MyDslGenerator.xtend&quot;&gt;generator implementation of our example&lt;/a&gt;, where the target language is C:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The entry point of the new API is &lt;a href=&quot;https://github.com/eclipse/xtext-core/blob/master/org.eclipse.xtext/src/org/eclipse/xtext/generator/trace/node/TracingSugar.xtend&quot;&gt;TracingSugar&lt;/a&gt;, which provides extension methods to generate traced text. The code above uses &lt;code style=&quot;color: #ab3000;&quot;&gt;generateTracedFile&lt;/code&gt; to create a file and map its contents to &lt;code style=&quot;color: #555;&quot;&gt;model&lt;/code&gt;, the root of our AST. The &lt;code style=&quot;color: #555;&quot;&gt;generateHeader&lt;/code&gt; method is shown below. It defines another template, and the resulting text is mapped to the given ClassDeclaration using the &lt;code style=&quot;color: #ab3000;&quot;&gt;@Traced&lt;/code&gt; &lt;a href=&quot;https://www.eclipse.org/xtend/documentation/204_activeannotations.html&quot;&gt;active annotation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code style=&quot;color: #ab3000;&quot;&gt;_name&lt;/code&gt; extension method in the code above is another part of the new API. Here it writes the &lt;em&gt;name&lt;/em&gt; property of the ClassDeclaration into the output and maps it to the respective source location. This method is generated from the EMF model of the language using the &lt;code style=&quot;color: #ab3000;&quot;&gt;@TracedAccessors&lt;/code&gt; annotation. Just pass the EMF model factory class as parameter to the annotation, and it creates a tracing method for each structural feature (i.e. property or reference) of your language.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;The Generator Tree&lt;/h2&gt;
&lt;p&gt;The new tracing API creates output text in two phases: first it creates a tree of &lt;em&gt;generator nodes&lt;/em&gt; from the Xtend templates, then it transforms that tree into a character sequence with corresponding tracing information. The base interface of generator nodes is &lt;a href=&quot;https://github.com/eclipse/xtext-core/blob/master/org.eclipse.xtext/src/org/eclipse/xtext/generator/trace/node/IGeneratorNode.xtend&quot;&gt;IGeneratorNode&lt;/a&gt;. There are predefined nodes for text segments, line breaks, indentation of a subtree, tracing a subtree, and applying templates.&lt;/p&gt;
&lt;p&gt;The generator tree can be constructed via templates, or directly through methods provided by TracingSugar, or with a mixture of both. The direct creation of subtrees is very useful for generating statements and expressions, where lots of small text segments need to be concatenated. The following excerpt of our example code generator transforms calls to class properties from our source DSL into C code:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The parts of the TracingSugar API used in this code snippet are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code style=&quot;color: #ab3000;&quot;&gt;trace&lt;/code&gt; to create a subtree traced to a source AST element,&lt;/li&gt;
&lt;li&gt;&lt;code style=&quot;color: #ab3000;&quot;&gt;append&lt;/code&gt; to add text to the subtree, and&lt;/li&gt;
&lt;li&gt;&lt;code style=&quot;color: #ab3000;&quot;&gt;appendNewLine&lt;/code&gt; to add line breaks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The resulting C code may look like this:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Employing the Traces&lt;/h2&gt;
&lt;p&gt;Trace information is written into &lt;em&gt;_trace&lt;/em&gt; files next to the generator output. For example, if you generate a file &lt;em&gt;persons.c&lt;/em&gt;, you’ll get a corresponding &lt;em&gt;.persons.c._trace&lt;/em&gt; in the same output directory. Xtext ships a viewer for these files, which is very useful to check the result of your tracing computation. In the screenshot below, we can see that the property reference &lt;code style=&quot;color: #555;&quot;&gt;bag&lt;/code&gt; is translated to the C code &lt;code style=&quot;color: #555;&quot;&gt;Bag* __local_0 = &amp;amp;this-&amp;gt;bag;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://typefox.io/wp-content/uploads/2017/05/trace_viewer.png&quot;&gt;&lt;img alt=&quot;trace_viewer&quot; class=&quot;alignnone wp-image-14237&quot; height=&quot;452&quot; src=&quot;http://typefox.io/wp-content/uploads/2017/05/trace_viewer-300x226.png&quot; width=&quot;600&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The programmatic representation of such a trace file is the &lt;a href=&quot;https://github.com/eclipse/xtext-core/blob/master/org.eclipse.xtext/src/org/eclipse/xtext/generator/trace/ITrace.java&quot;&gt;ITrace&lt;/a&gt; interface. An instance of ITrace points either in the source-to-target or the target-to-source direction, depending on how it was obtained. In order to get such a trace, inject &lt;a href=&quot;https://github.com/eclipse/xtext-core/blob/master/org.eclipse.xtext/src/org/eclipse/xtext/generator/trace/ITraceForURIProvider.java&quot;&gt;ITraceForURIProvider&lt;/a&gt; and call &lt;code style=&quot;color: #555;&quot;&gt;getTraceToTarget&lt;/code&gt; (for a source-to-target trace) or &lt;code style=&quot;color: #555;&quot;&gt;getTraceToSource&lt;/code&gt; (for a target-to-source trace).&lt;/p&gt;
&lt;p&gt;Xtext provides some generic UI for traced generated code: If you right-click some element of your source file and select “Open Generated File”, you’ll be directed to the exact location to which that element has been traced. In the same way, you can right-click somewhere in the generated code and select “Open Source File” to navigate to the respective source location. This behavior is shown in the animation below.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;tracing_c_10fps&quot; class=&quot;alignnone wp-image-14238 size-full&quot; height=&quot;398&quot; src=&quot;http://typefox.io/wp-content/uploads/2017/05/tracing_c_10fps.gif&quot; width=&quot;454&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Enhancing Existing Code Generators&lt;/h2&gt;
&lt;p&gt;In many cases it is not necessary to rewrite a code generator from scratch in order to enhance it with tracing information. The new API is designed in a way that it can be weaved into existing Xtend code with comparatively little effort. The following hints might help you for such a task, summarizing what we have learned in the previous sections of this post.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code style=&quot;color: #ab3000;&quot;&gt;generateTracedFile&lt;/code&gt; to create a traced text file. There are two overloaded variants of that method: one that accepts a template and traces it to a root AST element, and one that accepts a generator node. If you are already using Xtend templates, just pass them to this method.&lt;/li&gt;
&lt;li&gt;Add the &lt;code style=&quot;color: #ab3000;&quot;&gt;@Traced&lt;/code&gt; annotation to methods that transform a whole AST element into text. In some cases it might be useful to extract parts of a template into local methods so this annotation can be applied.&lt;/li&gt;
&lt;li&gt;Use the &lt;code style=&quot;color: #ab3000;&quot;&gt;@TracedAccessors&lt;/code&gt; annotation to generate extension methods for tracing single properties and references. For example, if you have an expression such as &lt;code style=&quot;color: #555;&quot;&gt;property.name&lt;/code&gt; in your template, you could replace that with &lt;code&gt;&lt;span style=&quot;color: #555;&quot;&gt;property.&lt;/span&gt;&lt;span style=&quot;color: #ab3000;&quot;&gt;_name&lt;/span&gt;&lt;/code&gt; so that the expression is properly traced.&lt;/li&gt;
&lt;li&gt;Use the TracingSugar methods to construct a generator subtree out of fine-grained source elements such as expressions. If you have previously used other string concatenation tools like StringBuilder or StringConcatenation, you can replace them with CompositeGeneratorNode (see e.g. &lt;code style=&quot;color: #555;&quot;&gt;generateExpression&lt;/code&gt; in &lt;a href=&quot;https://github.com/TypeFox/tracing_codegen/blob/master/eclipse/io.typefox.traceexample.eclipse/src/io/typefox/traceexample/eclipse/generator/MyDslGenerator.xtend&quot;&gt;our example code&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;It’s Time to Trace!&lt;/h2&gt;
&lt;p&gt;With the new Xtext version 2.12, generating traced code has become a lot simpler. If such traces are relevant in any way for your languages, don’t hesitate to try the API described here! We also welcome any &lt;a href=&quot;https://typefox.io/contact&quot;&gt;feedback&lt;/a&gt;, so please &lt;a href=&quot;https://github.com/eclipse/xtext-core/issues&quot;&gt;report problems on GitHub&lt;/a&gt; and &lt;a href=&quot;http://gitter.im/eclipse/xtext&quot;&gt;meet us on Gitter&lt;/a&gt; to discuss things, or just to tell us how cool tracing is &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;fusion-clearfix&quot;&gt;&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 24 May 2017 08:54:48 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: It’s time to organise Eclipse Oxygen DemoCamps</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/Lje3kEtTqsI/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/Lje3kEtTqsI/</link>
	<description>What is an Eclipse DemoCamp and why should I organise one?&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/Lje3kEtTqsI&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 23 May 2017 08:35:00 +0000</pubDate>
</item>
<item>
	<title>Antoine Thomas: It’s time to organise Eclipse Oxygen DemoCamps</title>
	<guid isPermaLink="false">http://blog.ttoine.net/?p=1241</guid>
	<link>http://blog.ttoine.net/en/2017/05/23/its-time-to-organise-eclipse-oxygen-democamps/</link>
	<description>&lt;p&gt;The next major release of the Eclipse Oxygen is coming up on June 28 and, it means the start of this year’s &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_Oxygen_2017&quot;&gt;Eclipse DemoCamps&lt;/a&gt; season. If you or your colleagues are considering a DemoCamp for 2017, we would like to help!&lt;/p&gt;
&lt;h2&gt;What’s a DemoCamp?&lt;/h2&gt;
&lt;p&gt;You may be asking yourself what the heck a DemoCamp is and why should you care? Eclipse DemoCamps are typically 1-day or even evening events organized by Eclipse community members all over the world. The organizers bring together a set of expert speakers and attendees from their local community. In other words, it’s a free event where you get to meet fellow Eclipsians and learn from each other in the form of demos/talks about Eclipse technology.&lt;/p&gt;
&lt;h2&gt;How do I get started?&lt;/h2&gt;
&lt;p&gt;This is the best part, wherever you are, you can organize an Eclipse DemoCamp! You choose the place, set the time, organize the venue (maybe a local pub or company office), provide a screen and projector, and arrange for refreshments.&lt;/p&gt;
&lt;p&gt;To tell us that you are planning an Eclipse DemoCamp:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send us an email on democamps@eclipse.org to ask about support, speaker ideas or possible goodies&lt;/li&gt;
&lt;li&gt;Add it to the DemoCamp 2017 wiki page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-1242 colorbox-1241&quot; height=&quot;730&quot; src=&quot;http://blog.ttoine.net/files/2017/05/screen-shot-2017-05-22-at-16.20.42-1024x730.png&quot; width=&quot;1024&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To add it, simply create a page with the program and venue information. And if you use another service like Meetup, just add a link to it from the Eclipse wiki. We will be pleased to list it on &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_Oxygen_2017&quot;&gt;events.eclipse.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;How does Eclipse Foundation help?&lt;/h2&gt;
&lt;p&gt;We, as the Eclipse Foundation, will participate to the cost of food, beverages, and room rental up to $300. We encourage organizers to find outside corporate sponsors to help organize their event. Sponsors usually contribute a certain amount, food or provide the space. Please acknowledge your sponsors on the DemoCamp &amp;amp; Hackathon wiki page and at the event itself.&lt;/p&gt;
&lt;p&gt;We will help you promote it through the Eclipse Foundation’s social media network and website. To read more about organizing an event, visit this page “&lt;a href=&quot;https://www.eclipse.org/community/democamp/organizedemocamp.php&quot;&gt;Organise an Eclipse DemoCamp or Hackathon&lt;/a&gt;“.&lt;/p&gt;
&lt;p&gt;Eclipse Foundation staff also tries to attend the DemoCamps. This is obviously not always possible, but who knows… we could be coming to yours!&lt;/p&gt;
&lt;p&gt;In 2016, DemoCamps took place in 19 different cities, from 10 different countries: Austria, Canada, China, Germany, Guatemala, Hungary, India, Norway, Poland, and Switzerland! We need you to reach new places in 2017 and that place could be near you!&lt;/p&gt;
&lt;p&gt;Looking forward to hear from you &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.2.1/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 23 May 2017 08:27:29 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Presentation of the Vert.x-Swagger project</title>
	<guid isPermaLink="true">http://vertx.io/blog/presentation-of-the-vert-x-swagger-project</guid>
	<link>http://vertx.io/blog/presentation-of-the-vert-x-swagger-project</link>
	<description>&lt;article&gt;&lt;p&gt;This post is an introduction to the &lt;a href=&quot;https://github.com/phiz71/vertx-swagger&quot;&gt;Vert.x-Swagger&lt;/a&gt; project, and describe how to use the &lt;code&gt;Swagger-Codegen&lt;/code&gt; plugin and the &lt;code&gt;SwaggerRouter&lt;/code&gt; class.&lt;/p&gt;
&lt;h2 id=&quot;eclipse-vert-x-swagger&quot;&gt;Eclipse Vert.x &amp;amp; Swagger&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-core/java/&quot;&gt;Vert.x&lt;/a&gt; and &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/&quot;&gt;Vert.x Web&lt;/a&gt; are very convenient to write REST API and especially the &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/Router.html&quot;&gt;Router&lt;/a&gt; which is very useful to manage all resources of an API.&lt;/p&gt;
&lt;p&gt;But when I start a new API, I usually use the “design-first” approach and &lt;a href=&quot;http://swagger.io/specification/&quot;&gt;Swagger&lt;/a&gt; is my best friend to define what my API is supposed to do. And then, comes the “boring” part of the job : convert the swagger file content into java code. That’s always the same : resources, operations, models…&lt;/p&gt;
&lt;p&gt;Fortunately, Swagger provides a codegen tool : &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen&quot;&gt;Swagger-Codegen&lt;/a&gt;. With this tool, you can generate a server stub based on your swagger definition file. 
However, even if this generator provides many different languages and framework, Vert.X is missing.&lt;/p&gt;
&lt;p&gt;This is where the &lt;a href=&quot;https://github.com/phiz71/vertx-swagger&quot;&gt;Vert.x-Swagger&lt;/a&gt; project comes in.&lt;/p&gt;
&lt;h2 id=&quot;the-project&quot;&gt;The project&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Vert.x-Swagger&lt;/strong&gt; is a maven project providing 2 modules.&lt;/p&gt;
&lt;h3 id=&quot;vertx-swagger-codegen&quot;&gt;vertx-swagger-codegen&lt;/h3&gt;
&lt;p&gt;It’s a &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen&quot;&gt;Swagger-Codegen&lt;/a&gt; plugin, which add the capability of generating a Java Vert.x WebServer to the generator.&lt;/p&gt;
&lt;p&gt;The generated server mainly contains :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POJOs for &lt;code&gt;definitions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;one Verticle per &lt;code&gt;tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;one MainVerticle, which manage others APIVerticle and start an HttpServer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;the MainVerticle use &lt;em&gt;vertx-swagger-router&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3 id=&quot;vertx-swagger-router&quot;&gt;vertx-swagger-router&lt;/h3&gt;
&lt;p&gt;The main class of this module is &lt;code&gt;SwaggerRouter&lt;/code&gt;. It’s more or less a &lt;em&gt;Factory&lt;/em&gt; (and maybe I should rename the class) that can create a &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/Router.html&quot;&gt;Router&lt;/a&gt;, using the swagger definition file to configure all the routes. For each route, it extracts parameters from the request (&lt;code&gt;Query&lt;/code&gt;, &lt;code&gt;Path&lt;/code&gt;, &lt;code&gt;Header&lt;/code&gt;, &lt;code&gt;Body&lt;/code&gt;, &lt;code&gt;Form&lt;/code&gt;) and send them on the eventBus, using either the &lt;code&gt;operationId&lt;/code&gt; as the address or a computed id (just a parameter in the constructor).&lt;/p&gt;
&lt;h2 id=&quot;let-see-how-it-works&quot;&gt;Let see how it works&lt;/h2&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block info&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;For this post, I will use a simplified swagger file but you can find a more complex example &lt;a href=&quot;https://github.com/phiz71/vertx-swagger/tree/master/sample/petstore-vertx-server&quot;&gt;here&lt;/a&gt; based on the &lt;a href=&quot;http://petstore.swagger.io/&quot;&gt;petstore&lt;/a&gt; swagger file&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3 id=&quot;generating-the-server&quot;&gt;Generating the server&lt;/h3&gt;
&lt;p&gt;First, choose your swagger definition. Here’s a YAML File, but it could be a JSON file :&lt;/p&gt;


&lt;p&gt;Then, download these libraries :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://central.maven.org/maven2/io/swagger/swagger-codegen-cli/2.2.2/swagger-codegen-cli-2.2.2.jar&quot;&gt;swagger-codegen-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://central.maven.org/maven2/com/github/phiz71/vertx-swagger-codegen/1.0.0/vertx-swagger-codegen-1.0.0.jar&quot;&gt;vertx-swagger-codegen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, run this command&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;java -cp /path/to/swagger-codegen-cli-&lt;span class=&quot;hljs-number&quot;&gt;2.2&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;.jar:/path/to/vertx-swagger-codegen-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.jar io.swagger.codegen.SwaggerCodegen generate \
  &lt;span class=&quot;hljs-operator&quot;&gt;-l&lt;/span&gt; java-vertx \
  -o path/to/destination/folder \
  -i path/to/swagger/definition \
  --group-id your.group.id \
  --artifact-id your.artifact.id&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block info&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;For more Information about how SwaggerCodegen works &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; you can read this &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen#getting-started&quot;&gt;https://github.com/swagger-api/swagger-codegen#getting-started&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;You should have something like that in your console:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.parser&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.Swagger20Parser&lt;/span&gt; - reading from ./wineCellarSwagger&lt;span class=&quot;hljs-class&quot;&gt;.yaml&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/model/Bottle&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/model/CellarInformation&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/verticle/BottlesApi&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/verticle/BottlesApiVerticle&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/verticle/InformationApi&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/verticle/InformationApiVerticle&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/resources/swagger&lt;span class=&quot;hljs-class&quot;&gt;.json&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/MainApiVerticle&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/resources/vertx-default-jul-logging&lt;span class=&quot;hljs-class&quot;&gt;.properties&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/pom&lt;span class=&quot;hljs-class&quot;&gt;.xml&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/README&lt;span class=&quot;hljs-class&quot;&gt;.md&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/.swagger-codegen-ignore&lt;/code&gt;&lt;/pre&gt;
And this in your destination folder:&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Generated sources&quot; src=&quot;http://vertx.io/assets/blog/vertx-swagger-presentation/GeneratedProject.png&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-have-been-created-&quot;&gt;What have been created ?&lt;/h3&gt;
&lt;p&gt;As you can see in &lt;strong&gt;1&lt;/strong&gt;,  the &lt;em&gt;vertx-swagger-codegen&lt;/em&gt; plugin has created one POJO by &lt;code&gt;definition&lt;/code&gt; in the swagger file.&lt;/p&gt;
&lt;h4 id=&quot;example-the-bottle-definition&quot;&gt;Example : the bottle definition&lt;/h4&gt;


&lt;p&gt;In &lt;strong&gt;2a&lt;/strong&gt; and &lt;strong&gt;2b&lt;/strong&gt; you can find :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an interface which contains a function per &lt;code&gt;operation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a verticle which defines all &lt;code&gt;operationId&lt;/code&gt; and create &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_the_event_bus_api&quot;&gt;EventBus&lt;/a&gt; consumers &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;example-the-bottles-interface&quot;&gt;Example : the Bottles interface&lt;/h4&gt;


&lt;h4 id=&quot;example-the-bottles-verticle&quot;&gt;Example : the Bottles verticle&lt;/h4&gt;


&lt;h3 id=&quot;-and-now-&quot;&gt;… and now ?&lt;/h3&gt;
&lt;p&gt;Line &lt;code&gt;23&lt;/code&gt; of &lt;code&gt;BottlesApiVerticle.java&lt;/code&gt;, you can see this&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;BottlesApi service = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BottlesApiImpl();&lt;/code&gt;&lt;/pre&gt;
This line will not compile until the &lt;code&gt;BottlesApiImpl&lt;/code&gt; class is created.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;In all &lt;strong&gt;XXXAPI&lt;/strong&gt;Verticles, you will find a variable called &lt;em&gt;service&lt;/em&gt;. It is a &lt;strong&gt;XXXAPI&lt;/strong&gt; type and it is instanciated with a &lt;strong&gt;XXXAPI&lt;/strong&gt;Impl contructor. This class does not exist yet since it is the business of your API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And so you will have to create these implementations.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;fine-but-what-if-i-don-t-want-to-build-my-api-like-this-&quot;&gt;Fine, but what if I don’t want to build my API like this ?&lt;/h2&gt;
&lt;p&gt;Well, Vert.x is &lt;strong&gt;unopinionated&lt;/strong&gt; but the way the &lt;em&gt;vertx-swagger-codegen&lt;/em&gt; creates the server stub &lt;strong&gt;is not&lt;/strong&gt;. 
So if you want to implement your API the way you want, while enjoying dynamic routing based on a swagger file, the &lt;em&gt;vertx-swagger-router&lt;/em&gt; library can be used standalone. &lt;/p&gt;
&lt;p&gt;Just import this jar into your project :&lt;/p&gt;


&lt;p&gt;You will be able to create your &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/Router.html&quot;&gt;Router&lt;/a&gt; like this :&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;FileSystem vertxFileSystem = vertx.fileSystem();
vertxFileSystem.readFile(&lt;span class=&quot;hljs-string&quot;&gt;“&lt;strong&gt;&lt;em&gt;YOUR_SWAGGER_FILE&lt;/em&gt;&lt;/strong&gt;“&lt;/span&gt;, readFile -&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (readFile.succeeded()) {
        Swagger swagger = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SwaggerParser().parse(readFile.result().toString(Charset.forName(&lt;span class=&quot;hljs-string&quot;&gt;“utf-8”&lt;/span&gt;))); 
        Router swaggerRouter = SwaggerRouter.swaggerRouter(Router.router(vertx), swagger, vertx.eventBus(), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; OperationIdServiceIdResolver());
        […]
   } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        […]
   }
});&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;You can ignore the last parameter in &lt;code&gt;SwaggerRouter.swaggerRouter(...)&lt;/code&gt;. As a result, addresses will be computed instead of using &lt;code&gt;operationId&lt;/code&gt; from the swagger file. 
For instance, &lt;code&gt;GET /bottles/{bottle_id}&lt;/code&gt; will become &lt;em&gt;GET_bottles_bottle-id&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Vert.x and Swagger are great tools to build and document an API but using both in the same project can be painful. The &lt;a href=&quot;https://github.com/phiz71/vertx-swagger&quot;&gt;Vert.x-Swagger&lt;/a&gt; project was made to save time, letting the developers focusing on business code.
It can be seen as an API framework over Vert.X.&lt;/p&gt;
&lt;p&gt;You can also use the &lt;code&gt;SwaggerRouter&lt;/code&gt; in your own project without using Swagger-Codegen.&lt;/p&gt;
&lt;p&gt;In future releases, more information from the swagger file will be used to configure the router and certainly others languages will be supported.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;Though Vert.x is polyglot, Vert.x-Swagger project only supports Java. If you want to contribute to support more languages, you’re welcome :) &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; &lt;p&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;


&lt;/article&gt;</description>
	<pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>N4JS: N4JS Becomes an Eclipse Project</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-674575259795580033</guid>
	<link>http://n4js.blogspot.com/2017/05/n4js-becomes-eclipse-project.html</link>
	<description>&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;We’re proud to announce that N4JS has been accepted as an Eclipse Project and the final official steps are underway. Our team have been working very hard to wrap up the Initial Contribution and are excited to be part of Eclipse. The project will be hosted at &lt;a class=&quot;bare&quot; href=&quot;https://eclipse.org/n4js&quot;&gt;https://eclipse.org/n4js&lt;/a&gt;, although this currently redirects to the project description while our pages are being created. In the meantime, N4JS is already open source - our GitHub project pages are located at &lt;a class=&quot;bare&quot; href=&quot;http://numberfour.github.io/n4js/&quot;&gt;http://numberfour.github.io/n4js/&lt;/a&gt; which contains articles, documentation, the source for N4JS and more.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;Some background information about us:&lt;/strong&gt;&lt;br /&gt;N4JS was developed by &lt;a href=&quot;https://www.enfore.com/&quot;&gt;Enfore AG&lt;/a&gt;, founded in 2009 as NumberFour AG by Marco Boerries. Enfore’s goal is to build an open business platform for 200+ million small businesses and to provide those businesses with the tools and solutions they need to stay competitive in a connected world.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Initially, JavaScript was intended as the main language for third-party developers to contribute to our platform; it runs directly in the browser and it’s the language of the web! One major drawback is the absence of a static type system; this turned out to be an essential requirement for us. We wanted to ensure reliable development of our platform and our own applications, as well as making life easier for third-party contributors to the Enfore platform. That’s the reason why we developed N4JS, a general-purpose programming language based on ECMAScript 5 (commonly known as JavaScript). The language combines the dynamic aspects of JavaScript with the strengths of Java-like types to facilitate the development of flexible and reliable applications.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;N4JS is constantly growing to support many new modern language features as they become available. Some of the features already supported are concepts introduced in ES6 including arrow functions, &lt;code&gt;async/await&lt;/code&gt;, modules and much more. Our core team are always making steady improvements and our front end team make use of the language and IDE daily for their public-facing projects. For more information on how the N4JS language differs from other JavaScript variants introducing static typing, see our detailed &lt;a href=&quot;http://numberfour.github.io/n4js/faq&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;Why Eclipse?&lt;/strong&gt;&lt;br /&gt;For us, software development is much more than simply writing code, which is why we believe in IDEs and Eclipse in particular. We were looking for developer tools which leverage features like live code validation, content assist (aka code completion), quick fixes, and a robust testing framework. Contributors to our platform can benefit from these resources for their own safe and intuitive application development.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;We tried very hard to design N4JS so that Java developers feel at home when writing JavaScript without sacrificing JavaScript’s support for dynamic and functional features. Our vision is to provide an IDE for statically-typed JavaScript that feels just like JDT. This is why we strongly believe that N4JS could be quite interesting in particular for Eclipse (Java) developers. Aside from developers who are making use of N4JS, there are areas in the development of N4JS itself which would be of particular interest to committers versed in type theory, semantics, EMF, Xtext and those who generally enjoy solving the multitude of challenges involved in creating new programming languages.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;What’s next?&lt;/strong&gt;&lt;br /&gt;While we are moving the project to Eclipse, there are plenty of important checks that must be done by the Eclipse Intellectual Property Team. The Initial Contribution is under review with approximately thirty Contribution Questionnaires created. This is a great milestone for us and reflects the huge effort involved in the project to date. We look forward to joining Eclipse, taking part in the ecosystem in an official capacity and seeing what the community can do with N4JS. While we complete these final requirements, we want to extend many thanks to all at Eclipse who are helping out with the process so far! &lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 19 May 2017 15:34:02 +0000</pubDate>
	<author>noreply@blogger.com (Brian Smith)</author>
</item>
<item>
	<title>Roxanne Joncas: Open Testbeds, DB Case Study, and IoT Events</title>
	<guid isPermaLink="false">https://medium.com/p/5a7414ffa1e3</guid>
	<link>https://medium.com/@roxanne.iot/open-testbeds-db-cast-study-and-iot-events-5a7414ffa1e3?source=rss-82f8afd3e513------2</link>
	<description>&lt;p&gt;The Eclipse IoT community has been working hard on some pretty awesome things over the past few months! Here is a quick summary of what has been happening.&lt;/p&gt;&lt;h3&gt;Open Testbeds&lt;/h3&gt;&lt;p&gt;We recently &lt;a href=&quot;https://www.eclipse.org/org/press-release/20170426_iottestbeds.php&quot;&gt;announced&lt;/a&gt; the launch of Eclipse IoT Open Testbeds. Simply put, they are collaborations between vendors and open source communities that aim to demonstrate and test commercial and open source components needed to create specific industry solutions.&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://www.eclipse.org/org/press-release/20170426_iottestbeds.php&quot;&gt;Asset Tracking Management Testbed&lt;/a&gt; is the very first one! It is a collaboration between Azul Systems, Codenvy, Eurotech, Red Hat, and Samsung’s ARTIK team. It demonstrates how assets with various sensors can be tracked in real-time, in order to minimize the cost of lost or damaged parcels. You can learn more about the Eclipse IoT Open Testbeds &lt;a href=&quot;https://iot.eclipse.org/testbeds/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Watch &lt;a href=&quot;https://medium.com/u/12c9446b8e55&quot;&gt;Benjamin Cabé&lt;/a&gt; present the Asset Tracking testbed demo in the video below. It was recorded at the Red Hat Summit in Boston this month.⬇&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/9760619803f58c96c48cecf2af59dd18/href&quot;&gt;https://medium.com/media/9760619803f58c96c48cecf2af59dd18/href&lt;/a&gt;&lt;h3&gt;Case Study&lt;/h3&gt;&lt;p&gt;We have been working with Deutsche Bahn (DB) and DB Systel to create a great &lt;a href=&quot;https://iot.eclipse.org/resources/case-studies/Eclipse%20IoT%20Success%20Story%20-%20DB.pdf&quot;&gt;case study&lt;/a&gt; that demonstrates how open source IoT technology is being used on their German railway system. They are currently using two Eclipse IoT projects, &lt;a href=&quot;https://www.eclipse.org/paho/&quot;&gt;Eclipse Paho&lt;/a&gt; and &lt;a href=&quot;https://mosquitto.org/&quot;&gt;Eclipse Mosquitto&lt;/a&gt;, among other technologies. In other words, if you’ve taken a DB train in Germany, you might have witnessed the “invisible” work of Eclipse IoT technology at the station or on board. How awesome is that?!&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://iot.eclipse.org/resources/case-studies/Eclipse%20IoT%20Success%20Story%20-%20DB.pdf&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*w_RkPbsu54ui3KKgVjF0BA.png&quot; /&gt;&lt;/a&gt;Case Study — Eclipse IoT and DB&lt;/figure&gt;&lt;h3&gt;Upcoming IoT Events&lt;/h3&gt;&lt;p&gt;I am currently working on the organization of two upcoming Eclipse IoT Days that will take place in Europe this fall! 🍂 🍁 🍃 We are currently accepting talks for both events. Go on, submit your passion! I am excited to read your proposal :)&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://thingmonk.com/&quot;&gt;&lt;strong&gt;Eclipse IoT Day @ Thingmonk&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;September 11 | London, UK&lt;br /&gt;📢 Email us your proposal iot at eclipse dot org&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2017/&quot;&gt;&lt;strong&gt;Eclipse IoT Day @ EclipseCon Europe&lt;/strong&gt;&lt;br /&gt;&lt;/a&gt;October 24 | Ludwigsburg, Germany&lt;br /&gt;📢 &lt;a href=&quot;https://www.eclipsecon.org/europe2017/cfp&quot;&gt;Propose a talk&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I look forward to meeting you in person at both events!&lt;/p&gt;&lt;p&gt;— Roxanne (Yes, I decided to sign this blog post.)&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=5a7414ffa1e3&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 19 May 2017 13:02:20 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: Installing Red Hat Developer Studio 10.2.0.GA through RPM</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/10.2.0.rpm-installation.html</guid>
	<link>https://tools.jboss.org/blog/10.2.0.rpm-installation.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;With the release of &lt;a href=&quot;https://tools.jboss.org/downloads/devstudio/neon/10.2.0.GA.html&quot;&gt;Red Hat JBoss Developer Studio 10.2&lt;/a&gt;, it is now possible to install Red Hat JBoss Developer Studio as an RPM.
      It is available as a tech preview. The purpose of this article is to describe the steps you should follow in order to install Red Hat JBoss Developer Studio.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;red-hat-software-collections&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#red-hat-software-collections&quot;&gt;&lt;/a&gt;Red Hat Software Collections&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Developer Studio RPM relies on Red Hat Software Collections. You don’t need to install Red Hat Software Collections but you need to enable
      the Red Hat Software Collections repositories before you start the installation of the Red Hat JBoss Developer Studio.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;enabling-the-red-hat-software-collections-base-repository&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#enabling-the-red-hat-software-collections-base-repository&quot;&gt;&lt;/a&gt;Enabling the Red Hat Software Collections base repository&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The identifier for the repository is &lt;strong&gt;rhel-server-rhscl-7-rpms&lt;/strong&gt; on Red Hat Enterprise Linux Server and &lt;strong&gt;rhel-workstation-rhscl-7-rpms&lt;/strong&gt; on Red Hat Enterprise Linux Workstation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The command to enable the repository on Red Hat Enterprise Linux Server is:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;sudo subscription-manager repos --enable rhel-server-rhscl-7-rpms&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The command to enable the repository on Red Hat Enterprise Linux Workstation is:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;sudo subscription-manager repos --enable rhel-workstation-rhscl-7-rpms&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For more information, please refer to the &lt;a href=&quot;https://access.redhat.com/documentation/en/red-hat-software-collections/?version=2/&quot;&gt;Red Hat Software Collections&lt;/a&gt; documentation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;jboss-developer-studio-repository&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-developer-studio-repository&quot;&gt;&lt;/a&gt;JBoss Developer Studio repository&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As this is a tech preview, you need to manually configure the JBoss Developer Studio repository.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Create a file &lt;strong&gt;/etc/yum.repos.d/rh-eclipse46-devstudio.repo&lt;/strong&gt; with the following content:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;[rh-eclipse46-devstudio-stable-10.x]
      name=rh-eclipse46-devstudio-stable-10.x
      baseurl=https://devstudio.redhat.com/static/10.0/stable/rpms/x86_64/
      enabled=1
      gpgkey=https://www.redhat.com/security/data/a5787476.txt
      gpgcheck=1
      upgrade_requirements_on_install=1
      metadata_expire=24h&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;install-red-hat-jboss-developer-studio&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#install-red-hat-jboss-developer-studio&quot;&gt;&lt;/a&gt;Install Red Hat JBoss Developer Studio&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You’re now ready to install Red Hat JBoss Developer Studio through RPM.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enter the following command:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;sudo yum install rh-eclipse46-devstudio&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Answer &amp;amp;aposy&amp;amp;apos when transaction summary is ready to continue installation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Answer &amp;amp;aposy&amp;amp;apos one more time when you see request to import GPG public key&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;Public key for rh-eclipse46-devstudio .rpm is not installed
      Retrieving key from https://www.redhat.com/security/data/a5787476.txt
      Importing GPG key 0xA5787476:
       Userid     : &quot;Red Hat, Inc. (development key) &amp;lt;security@redhat.com&amp;gt;&quot;
       Fingerprint: 2d6d 2858 5549 e02f 2194 3840 08b8 71e6 a578 7476
       From       : https://www.redhat.com/security/data/a5787476.txt
      Is this ok [y/N]:&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;After all required dependencies have been downloaded and installed, Red Hat JBoss Developer Studio is available on your
      system through the standard update channel !!!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You should see messages like the following:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;rh eclipse46 devstudio.log&quot; src=&quot;https://tools.jboss.org/blog/images/20161212-rpm/rh-eclipse46-devstudio.log.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;launch-red-hat-jboss-developer-studio&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#launch-red-hat-jboss-developer-studio&quot;&gt;&lt;/a&gt;Launch Red Hat JBoss Developer Studio&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;From the system menu, mouse over the &lt;strong&gt;Programming&lt;/strong&gt; menu, and the &lt;strong&gt;Red Hat Eclipse&lt;/strong&gt; menu item will appear.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;programming menu&quot; src=&quot;https://tools.jboss.org/blog/images/20161212-rpm/programming-menu.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Select this menu item and Red Hat JBoss Developer Studio user interface will appear then:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;devstudio&quot; src=&quot;https://tools.jboss.org/blog/images/20161212-rpm/devstudio.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 19 May 2017 12:23:55 +0000</pubDate>
</item>
<item>
	<title>Cedric Brun: EcoreTools: user experience revamped thanks to Sirius 5.0</title>
	<guid isPermaLink="false">http://cedric.brun.io/eclipse/eclipse-oxygen-modeling</guid>
	<link>http://cedric.brun.io/eclipse/eclipse-oxygen-modeling/</link>
	<description>&lt;p&gt;Every year the Eclipse M7 milestone act as a very strong deadline for the projects which are part of the release train: it’s then time for polishing and refining!&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Time's up ! Pencils down, it's M7 !&lt;/p&gt;— Cédric Brun (@bruncedric) &lt;a href=&quot;https://twitter.com/bruncedric/status/13356256886&quot;&gt;4 mai 2010&lt;/a&gt;&lt;/blockquote&gt;


&lt;p&gt;When your company is responsible for a number of inter-dependent projects some of them core technologies like &lt;a href=&quot;https://projects.eclipse.org/projects/modeling.emfservices&quot; target=&quot;_blank&quot;&gt;EMF Services&lt;/a&gt; , the GMF Runtime, others user facing tools like  &lt;a href=&quot;http://www.eclipse.org/acceleo/&quot; target=&quot;_blank&quot;&gt;Acceleo&lt;/a&gt;,  &lt;a href=&quot;http://www.eclipse.org/sirius/&quot; target=&quot;_blank&quot;&gt;Sirius&lt;/a&gt; or &lt;a href=&quot;https://www.eclipse.org/ecoretools/&quot; target=&quot;_blank&quot;&gt;EcoreTools&lt;/a&gt;, packaging and integration oriented projects like Amalgam or the Eclipse Packaging project and all of these releases needs to be coordinated, then may is a busy month.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;This week: M7 milestones for EcoreTools, Amalgam, Sirius, testing the Modeling package. Plot twist: 3 work days ! &lt;a href=&quot;https://t.co/msqQkImRu4&quot;&gt;pic.twitter.com/msqQkImRu4&lt;/a&gt;&lt;/p&gt;— Cédric Brun (@bruncedric) &lt;a href=&quot;https://twitter.com/bruncedric/status/727412029292711936&quot;&gt;3 mai 2016&lt;/a&gt;&lt;/blockquote&gt;


&lt;p&gt;I’m personally involved in EcoreTools which makes me in the position to step in the role of the consumer of the other technologies and my plan for Oxygen was to make use of the Property Views support included in Sirius. This support allows me, as the maintainer of EcoreTools to specify directly through the &lt;code class=&quot;highlighter-rouge&quot;&gt;.odesign&lt;/code&gt; every Tab displayed in the &lt;strong&gt;properties view&lt;/strong&gt;. Just like the rest of Sirius it is 100% dynamic, no need for code generation or compilation, and complete flexibility with the ability to use queries in every part of the definition.&lt;/p&gt;

&lt;p&gt;Before Oxygen EcoreTools already had property editors. Some of them were coded by hand and were developed more than 8 years ago. When I replaced the legacy modeler by using Sirius I made sure at that time to reuse those highly tuned property editors. Others I generated using the first generation of the &lt;a href=&quot;https://eclipse.org/eef/#/&quot; target=&quot;_blank&quot;&gt;EEF Framework&lt;/a&gt; so that I could cover every type of Ecore and benefit from the dialogs to edit properties using double click. The &lt;a href=&quot;http://cedric.brun.io/ecoretools-20-luna-revival/&quot;&gt;intent at that time&lt;/a&gt; was to make the modeler usable in &lt;strong&gt;fullscreen&lt;/strong&gt; when no other view is visible.&lt;/p&gt;

&lt;p&gt;Because of this requirement I had to wait for the Sirius team to make its magic: the properties views support was ready for production with &lt;a href=&quot;https://www.eclipse.org/sirius/whatsnew/whatsnew4-1.html&quot;&gt;Sirius 4.1&lt;/a&gt;, but this was not including any support for dialogs and wizards yet.&lt;/p&gt;

&lt;p&gt;Then magic happened: the support for dialogs and wizards is now completely merged in Sirius, starting with M7. In EcoreTools the code responsible for those properties editors represents more than 70% of the total code which peaks at 28K.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://cedric.brun.io/images/blog/properties/locs.png&quot;&gt;&lt;img src=&quot;http://cedric.brun.io/images/blog/properties/locs.png&quot; /&gt;&lt;/a&gt;    
    Lines of Java code subject to deletion in EcoreTools
&lt;/figure&gt;

&lt;p&gt;In gray those are the plugins which are subject to removal once I use this new feature, as a developer &lt;strong&gt;one can only rejoice at the idea of deleting so much code!&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I went ahead and started &lt;a href=&quot;https://git.eclipse.org/r/#/c/96674/&quot;&gt;working&lt;/a&gt; on this, the schedule was tight but thanks to the ability to define reflective rules using &lt;strong&gt;Dynamic Mappings&lt;/strong&gt; I could quickly cover everything in Ecore and get those new dialogs working.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://cedric.brun.io/images/blog/properties/ng-dialogs-ecoretools.png&quot;&gt;&lt;img src=&quot;http://cedric.brun.io/images/blog/properties/ng-dialogs-ecoretools.png&quot; /&gt;&lt;/a&gt;    
    New vs old dialogs
&lt;/figure&gt;

&lt;p&gt;Just by using a dozen reflective rules and adding specific &lt;em&gt;Pages&lt;/em&gt; or &lt;em&gt;Widgets&lt;/em&gt; when needed.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://cedric.brun.io/images/blog/properties/vsm.png&quot;&gt;&lt;img src=&quot;http://cedric.brun.io/images/blog/properties/vsm.png&quot; /&gt;&lt;/a&gt;    
    The tooling definition in ecore.odesign
&lt;/figure&gt;

&lt;p&gt;It went so fast I could add new tools for the &lt;strong&gt;Generation Settings&lt;/strong&gt; through a specific tab.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://cedric.brun.io/images/blog/properties/genmodel.png&quot;&gt;&lt;img src=&quot;http://cedric.brun.io/images/blog/properties/genmodel.png&quot; /&gt;&lt;/a&gt;    
    Genmodel properties exposed through a specific tab
&lt;/figure&gt;

&lt;p&gt;And even introduce a link to directly navigate to the Java code generated from the model:&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://cedric.brun.io/images/blog/properties/ecoretools-navigate-java.png&quot;&gt;&lt;img src=&quot;http://cedric.brun.io/images/blog/properties/ecoretools-navigate-java.png&quot; /&gt;&lt;/a&gt;    
    Link opening the corresponding generated Java code.
&lt;/figure&gt;

&lt;p&gt;Even support for EAnnotations could be implemented in a nice way:&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://cedric.brun.io/images/blog/properties/eannotations.png&quot;&gt;&lt;img src=&quot;http://cedric.brun.io/images/blog/properties/eannotations.png&quot; /&gt;&lt;/a&gt;    
    Tab to add, edit or delete any EAnnotation
&lt;/figure&gt;

&lt;p&gt;As a tool provider I could focus on streamlining the experience, providing tabs and actions so that the end user don’t have to leave the modeler to adapt the generation settings or launch the code generation, give visual clues when something is invalid. I went through many variants of these UIs just to get the feel of it, as I get an instant feedback I only need minutes to rule out an option.  I have a whole new dimension I can use to make my tool super effective.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is what Sirius is about, empowering the tool provider to focus on the user experience of its users.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is just one of the many changes which we’ve been working on since last year to improve the user experience of modeling tools, Mélanie and Stéphane will present a talk on this very subject during EclipseCon France at Toulouse: &lt;a href=&quot;https://www.eclipsecon.org/france2017/session/all-about-ux-sirius&quot;&gt;“All about UX in Sirius.”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of these changes are landing in &lt;a href=&quot;https://www.eclipse.org/downloads/index-developer.php&quot; target=&quot;_blank&quot;&gt;Eclipse Oxygen&lt;/a&gt; starting with M7, those are newly introduced and I have no doubt I’ll have some polishing and refining to do, I’m counting on you to &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Ecoretools&quot; target=&quot;_blank&quot;&gt;report anything suspicious&lt;/a&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://cedric.brun.io/eclipse/eclipse-oxygen-modeling/&quot;&gt;EcoreTools: user experience revamped thanks to Sirius 5.0&lt;/a&gt; was originally published by Cédric Brun at &lt;a href=&quot;http://cedric.brun.io&quot;&gt;CTO @ Obeo&lt;/a&gt; on May 19, 2017.&lt;/p&gt;</description>
	<pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate>
	<author>cedric.brun@obeo.fr (Cédric Brun)</author>
</item>
<item>
	<title>Eclipse Announcements: Case Study: Deploying Eclipse IoT on Germany's DB Railway System</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/8RKqg6D0mA8/Eclipse%20IoT%20Success%20Story%20-%20DB.pdf</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/8RKqg6D0mA8/Eclipse%20IoT%20Success%20Story%20-%20DB.pdf</link>
	<description>We worked with Deutsche Bahn (DB) to find out how they use Eclipse IoT technology on their railway system!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/8RKqg6D0mA8&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 18 May 2017 08:55:00 +0000</pubDate>
</item>

</channel>
</rss>
